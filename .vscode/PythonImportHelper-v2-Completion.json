[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "werkzeug.datastructures",
        "description": "werkzeug.datastructures",
        "isExtraImport": true,
        "detail": "werkzeug.datastructures",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "werkzeug.datastructures",
        "description": "werkzeug.datastructures",
        "isExtraImport": true,
        "detail": "werkzeug.datastructures",
        "documentation": {}
    },
    {
        "label": "flask_uploads",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "UploadSet",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "IMAGES",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "AUDIO",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "DOCUMENTS",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "DATA",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "SCRIPTS",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "ARCHIVES",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "EXECUTABLES",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "UploadNotAllowed",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "configure_uploads",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "patch_request_class",
        "importPath": "flask_uploads",
        "description": "flask_uploads",
        "isExtraImport": true,
        "detail": "flask_uploads",
        "documentation": {}
    },
    {
        "label": "send_file",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Mailer",
        "importPath": "mailer",
        "description": "mailer",
        "isExtraImport": true,
        "detail": "mailer",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "mailer",
        "description": "mailer",
        "isExtraImport": true,
        "detail": "mailer",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "TranslatorException",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "change_locale",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "libs.strings",
        "description": "libs.strings",
        "isExtraImport": true,
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "ModelsHelper",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ModelsHelper",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "isExtraImport": true,
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "Sender",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "Sender",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "Sender",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "isExtraImport": true,
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BLACKLIST_ACCESS",
        "importPath": "blacklist",
        "description": "blacklist",
        "isExtraImport": true,
        "detail": "blacklist",
        "documentation": {}
    },
    {
        "label": "BLACKLIST_ACCESS",
        "importPath": "blacklist",
        "description": "blacklist",
        "isExtraImport": true,
        "detail": "blacklist",
        "documentation": {}
    },
    {
        "label": "INCLUDE",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "EXCLUDE",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "pre_dump",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "pre_dump",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "pre_dump",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_optional",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_refresh_token_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_raw_jwt",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_csrf_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "decode_token",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_identity",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "get_jwt_claims",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "fresh_jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "jwt_required",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "JWTManager",
        "importPath": "flask_jwt_extended",
        "description": "flask_jwt_extended",
        "isExtraImport": true,
        "detail": "flask_jwt_extended",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "isExtraImport": true,
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "isExtraImport": true,
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "isExtraImport": true,
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "isExtraImport": true,
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "isExtraImport": true,
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "isExtraImport": true,
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "isExtraImport": true,
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "isExtraImport": true,
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "isExtraImport": true,
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "isExtraImport": true,
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "reqparse",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "BitcoinPayModel",
        "importPath": "models.bitcoin",
        "description": "models.bitcoin",
        "isExtraImport": true,
        "detail": "models.bitcoin",
        "documentation": {}
    },
    {
        "label": "BitcoinPayModel",
        "importPath": "models.bitcoin",
        "description": "models.bitcoin",
        "isExtraImport": true,
        "detail": "models.bitcoin",
        "documentation": {}
    },
    {
        "label": "BitcoinPayModel",
        "importPath": "models.bitcoin",
        "description": "models.bitcoin",
        "isExtraImport": true,
        "detail": "models.bitcoin",
        "documentation": {}
    },
    {
        "label": "CardpayModel",
        "importPath": "models.cardpay",
        "description": "models.cardpay",
        "isExtraImport": true,
        "detail": "models.cardpay",
        "documentation": {}
    },
    {
        "label": "CardpayModel",
        "importPath": "models.cardpay",
        "description": "models.cardpay",
        "isExtraImport": true,
        "detail": "models.cardpay",
        "documentation": {}
    },
    {
        "label": "CardpayModel",
        "importPath": "models.cardpay",
        "description": "models.cardpay",
        "isExtraImport": true,
        "detail": "models.cardpay",
        "documentation": {}
    },
    {
        "label": "CardpayModel",
        "importPath": "models.cardpay",
        "description": "models.cardpay",
        "isExtraImport": true,
        "detail": "models.cardpay",
        "documentation": {}
    },
    {
        "label": "CartProductModel",
        "importPath": "models.cartproduct",
        "description": "models.cartproduct",
        "isExtraImport": true,
        "detail": "models.cartproduct",
        "documentation": {}
    },
    {
        "label": "CartProductModel",
        "importPath": "models.cartproduct",
        "description": "models.cartproduct",
        "isExtraImport": true,
        "detail": "models.cartproduct",
        "documentation": {}
    },
    {
        "label": "CartStatusModel",
        "importPath": "models.cartstatus",
        "description": "models.cartstatus",
        "isExtraImport": true,
        "detail": "models.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartStatusModel",
        "importPath": "models.cartstatus",
        "description": "models.cartstatus",
        "isExtraImport": true,
        "detail": "models.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartSystemModel",
        "importPath": "models.cartsystem",
        "description": "models.cartsystem",
        "isExtraImport": true,
        "detail": "models.cartsystem",
        "documentation": {}
    },
    {
        "label": "CartSystemModel",
        "importPath": "models.cartsystem",
        "description": "models.cartsystem",
        "isExtraImport": true,
        "detail": "models.cartsystem",
        "documentation": {}
    },
    {
        "label": "CartSystemModel",
        "importPath": "models.cartsystem",
        "description": "models.cartsystem",
        "isExtraImport": true,
        "detail": "models.cartsystem",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.colors",
        "description": "models.colors",
        "isExtraImport": true,
        "detail": "models.colors",
        "documentation": {}
    },
    {
        "label": "ColorsModel",
        "importPath": "models.colors",
        "description": "models.colors",
        "isExtraImport": true,
        "detail": "models.colors",
        "documentation": {}
    },
    {
        "label": "ColorsSchema",
        "importPath": "schemas.colors",
        "description": "schemas.colors",
        "isExtraImport": true,
        "detail": "schemas.colors",
        "documentation": {}
    },
    {
        "label": "ColorsSchema",
        "importPath": "schemas.colors",
        "description": "schemas.colors",
        "isExtraImport": true,
        "detail": "schemas.colors",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "models.users",
        "description": "models.users",
        "isExtraImport": true,
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "ConfirmationSchema",
        "importPath": "schemas.confirmation",
        "description": "schemas.confirmation",
        "isExtraImport": true,
        "detail": "schemas.confirmation",
        "documentation": {}
    },
    {
        "label": "FavStoreModel",
        "importPath": "models.favoritestore",
        "description": "models.favoritestore",
        "isExtraImport": true,
        "detail": "models.favoritestore",
        "documentation": {}
    },
    {
        "label": "FavStoreModel",
        "importPath": "models.favoritestore",
        "description": "models.favoritestore",
        "isExtraImport": true,
        "detail": "models.favoritestore",
        "documentation": {}
    },
    {
        "label": "FavStoreModel",
        "importPath": "models.favoritestore",
        "description": "models.favoritestore",
        "isExtraImport": true,
        "detail": "models.favoritestore",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSchema",
        "importPath": "schemas.forgot_password",
        "description": "schemas.forgot_password",
        "isExtraImport": true,
        "detail": "schemas.forgot_password",
        "documentation": {}
    },
    {
        "label": "file_helper",
        "importPath": "libs",
        "description": "libs",
        "isExtraImport": true,
        "detail": "libs",
        "documentation": {}
    },
    {
        "label": "ImageSchema",
        "importPath": "schemas.image",
        "description": "schemas.image",
        "isExtraImport": true,
        "detail": "schemas.image",
        "documentation": {}
    },
    {
        "label": "IMAGEDELETEEXCEPTION",
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "isExtraImport": true,
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "send_user_file",
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "isExtraImport": true,
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "IMAGE_SET",
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "isExtraImport": true,
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.product",
        "description": "models.product",
        "isExtraImport": true,
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "ProductModel",
        "importPath": "models.product",
        "description": "models.product",
        "isExtraImport": true,
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "ProductModel",
        "importPath": "models.product",
        "description": "models.product",
        "isExtraImport": true,
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "ProductSchema",
        "importPath": "schemas.product",
        "description": "schemas.product",
        "isExtraImport": true,
        "detail": "schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductSchema",
        "importPath": "schemas.product",
        "description": "schemas.product",
        "isExtraImport": true,
        "detail": "schemas.product",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.productcat",
        "description": "models.productcat",
        "isExtraImport": true,
        "detail": "models.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatModel",
        "importPath": "models.productcat",
        "description": "models.productcat",
        "isExtraImport": true,
        "detail": "models.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatModel",
        "importPath": "models.productcat",
        "description": "models.productcat",
        "isExtraImport": true,
        "detail": "models.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatSchema",
        "importPath": "schemas.productcat",
        "description": "schemas.productcat",
        "isExtraImport": true,
        "detail": "schemas.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatSchema",
        "importPath": "schemas.productcat",
        "description": "schemas.productcat",
        "isExtraImport": true,
        "detail": "schemas.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatSchema",
        "importPath": "schemas.productcat",
        "description": "schemas.productcat",
        "isExtraImport": true,
        "detail": "schemas.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCatSchema",
        "importPath": "schemas.productcat",
        "description": "schemas.productcat",
        "isExtraImport": true,
        "detail": "schemas.productcat",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.productcol",
        "description": "models.productcol",
        "isExtraImport": true,
        "detail": "models.productcol",
        "documentation": {}
    },
    {
        "label": "ProductColorModel",
        "importPath": "models.productcol",
        "description": "models.productcol",
        "isExtraImport": true,
        "detail": "models.productcol",
        "documentation": {}
    },
    {
        "label": "ProductColorModel",
        "importPath": "models.productcol",
        "description": "models.productcol",
        "isExtraImport": true,
        "detail": "models.productcol",
        "documentation": {}
    },
    {
        "label": "ProductColorSchema",
        "importPath": "schemas.productcol",
        "description": "schemas.productcol",
        "isExtraImport": true,
        "detail": "schemas.productcol",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.productsize",
        "description": "models.productsize",
        "isExtraImport": true,
        "detail": "models.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSizeModel",
        "importPath": "models.productsize",
        "description": "models.productsize",
        "isExtraImport": true,
        "detail": "models.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSizeModel",
        "importPath": "models.productsize",
        "description": "models.productsize",
        "isExtraImport": true,
        "detail": "models.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSizeSchema",
        "importPath": "schemas.productsize",
        "description": "schemas.productsize",
        "isExtraImport": true,
        "detail": "schemas.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSizeSchema",
        "importPath": "schemas.productsize",
        "description": "schemas.productsize",
        "isExtraImport": true,
        "detail": "schemas.productsize",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.productsubcat",
        "description": "models.productsubcat",
        "isExtraImport": true,
        "detail": "models.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCatModel",
        "importPath": "models.productsubcat",
        "description": "models.productsubcat",
        "isExtraImport": true,
        "detail": "models.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCatSchema",
        "importPath": "schemas.productsubcat",
        "description": "schemas.productsubcat",
        "isExtraImport": true,
        "detail": "schemas.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCatSchema",
        "importPath": "schemas.productsubcat",
        "description": "schemas.productsubcat",
        "isExtraImport": true,
        "detail": "schemas.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCatSchema",
        "importPath": "schemas.productsubcat",
        "description": "schemas.productsubcat",
        "isExtraImport": true,
        "detail": "schemas.productsubcat",
        "documentation": {}
    },
    {
        "label": "RatingTypeModel",
        "importPath": "models.ratingtype",
        "description": "models.ratingtype",
        "isExtraImport": true,
        "detail": "models.ratingtype",
        "documentation": {}
    },
    {
        "label": "RatingTypeModel",
        "importPath": "models.ratingtype",
        "description": "models.ratingtype",
        "isExtraImport": true,
        "detail": "models.ratingtype",
        "documentation": {}
    },
    {
        "label": "ReviewModel",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "ReviewModel",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "ReviewModel",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models.store",
        "description": "models.store",
        "isExtraImport": true,
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "StoreModel",
        "importPath": "models.store",
        "description": "models.store",
        "isExtraImport": true,
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "StoreModel",
        "importPath": "models.store",
        "description": "models.store",
        "isExtraImport": true,
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "StoreSchema",
        "importPath": "schemas.store",
        "description": "schemas.store",
        "isExtraImport": true,
        "detail": "schemas.store",
        "documentation": {}
    },
    {
        "label": "StoreSchema",
        "importPath": "schemas.store",
        "description": "schemas.store",
        "isExtraImport": true,
        "detail": "schemas.store",
        "documentation": {}
    },
    {
        "label": "StoreemailModel",
        "importPath": "models.storeemail",
        "description": "models.storeemail",
        "isExtraImport": true,
        "detail": "models.storeemail",
        "documentation": {}
    },
    {
        "label": "StoreemailModel",
        "importPath": "models.storeemail",
        "description": "models.storeemail",
        "isExtraImport": true,
        "detail": "models.storeemail",
        "documentation": {}
    },
    {
        "label": "StoreemailModel",
        "importPath": "models.storeemail",
        "description": "models.storeemail",
        "isExtraImport": true,
        "detail": "models.storeemail",
        "documentation": {}
    },
    {
        "label": "StorelocModel",
        "importPath": "models.storelocation",
        "description": "models.storelocation",
        "isExtraImport": true,
        "detail": "models.storelocation",
        "documentation": {}
    },
    {
        "label": "StorelocModel",
        "importPath": "models.storelocation",
        "description": "models.storelocation",
        "isExtraImport": true,
        "detail": "models.storelocation",
        "documentation": {}
    },
    {
        "label": "StorelocModel",
        "importPath": "models.storelocation",
        "description": "models.storelocation",
        "isExtraImport": true,
        "detail": "models.storelocation",
        "documentation": {}
    },
    {
        "label": "StorephoneModel",
        "importPath": "models.storephone",
        "description": "models.storephone",
        "isExtraImport": true,
        "detail": "models.storephone",
        "documentation": {}
    },
    {
        "label": "StorephoneModel",
        "importPath": "models.storephone",
        "description": "models.storephone",
        "isExtraImport": true,
        "detail": "models.storephone",
        "documentation": {}
    },
    {
        "label": "StorephoneModel",
        "importPath": "models.storephone",
        "description": "models.storephone",
        "isExtraImport": true,
        "detail": "models.storephone",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "schemas.users",
        "description": "schemas.users",
        "isExtraImport": true,
        "detail": "schemas.users",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "schemas.users",
        "description": "schemas.users",
        "isExtraImport": true,
        "detail": "schemas.users",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "ma",
        "importPath": "ma",
        "description": "ma",
        "isExtraImport": true,
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow_sqlalchemy",
        "description": "marshmallow_sqlalchemy",
        "isExtraImport": true,
        "detail": "marshmallow_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LocationModel",
        "importPath": "models.location",
        "description": "models.location",
        "isExtraImport": true,
        "detail": "models.location",
        "documentation": {}
    },
    {
        "label": "PaymentModel",
        "importPath": "models.payment",
        "description": "models.payment",
        "isExtraImport": true,
        "detail": "models.payment",
        "documentation": {}
    },
    {
        "label": "PaytypeModel",
        "importPath": "models.paymenttype",
        "description": "models.paymenttype",
        "isExtraImport": true,
        "detail": "models.paymenttype",
        "documentation": {}
    },
    {
        "label": "PaystatusModel",
        "importPath": "models.paystatus",
        "description": "models.paystatus",
        "isExtraImport": true,
        "detail": "models.paystatus",
        "documentation": {}
    },
    {
        "label": "unittest,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest.",
        "description": "unittest.",
        "detail": "unittest.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_usr_from_root",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app_setup",
        "description": "app_setup",
        "isExtraImport": true,
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "init_models",
        "description": "init_models",
        "isExtraImport": true,
        "detail": "init_models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "MigrateCommand",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Marshmallow",
        "importPath": "flask_marshmallow",
        "description": "flask_marshmallow",
        "isExtraImport": true,
        "detail": "flask_marshmallow",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "flask_script",
        "description": "flask_script",
        "isExtraImport": true,
        "detail": "flask_script",
        "documentation": {}
    },
    {
        "label": "ProductSubCatList",
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "isExtraImport": true,
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCat",
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "isExtraImport": true,
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserList",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserRegister",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "TokenRefresh",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserLogout",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Email",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Password",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Image",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Root_Status",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Admin_Status",
        "importPath": "resources.users",
        "description": "resources.users",
        "isExtraImport": true,
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserAvatar",
        "importPath": "resources.image",
        "description": "resources.image",
        "isExtraImport": true,
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "StoreAvatar",
        "importPath": "resources.image",
        "description": "resources.image",
        "isExtraImport": true,
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "ProductAvatar",
        "importPath": "resources.image",
        "description": "resources.image",
        "isExtraImport": true,
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "ProductCatAvatar",
        "importPath": "resources.image",
        "description": "resources.image",
        "isExtraImport": true,
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "RequestForgotPasswordDigit",
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "isExtraImport": true,
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "GetForgotPasswordId",
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "isExtraImport": true,
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "ViewForgotPasswordRequests",
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "isExtraImport": true,
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "ResetPassword",
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "isExtraImport": true,
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "ConfirmUser",
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "isExtraImport": true,
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "ViewConfirmation",
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "isExtraImport": true,
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "RequestConfirmationDigit",
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "isExtraImport": true,
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "resources.store",
        "description": "resources.store",
        "isExtraImport": true,
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StoreList",
        "importPath": "resources.store",
        "description": "resources.store",
        "isExtraImport": true,
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StorePagenate",
        "importPath": "resources.store",
        "description": "resources.store",
        "isExtraImport": true,
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "resources.product",
        "description": "resources.product",
        "isExtraImport": true,
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "ProductList",
        "importPath": "resources.product",
        "description": "resources.product",
        "isExtraImport": true,
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "ProductPagenate",
        "importPath": "resources.product",
        "description": "resources.product",
        "isExtraImport": true,
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "ProductCatList",
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "isExtraImport": true,
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCat",
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "isExtraImport": true,
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "ProductSizeList",
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "isExtraImport": true,
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSize",
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "isExtraImport": true,
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "ProductColorList",
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "isExtraImport": true,
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "ProductColor",
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "isExtraImport": true,
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "ColorList",
        "importPath": "resources.colors",
        "description": "resources.colors",
        "isExtraImport": true,
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "resources.colors",
        "description": "resources.colors",
        "isExtraImport": true,
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "BitcoinList",
        "importPath": "resources.bitcoin",
        "description": "resources.bitcoin",
        "isExtraImport": true,
        "detail": "resources.bitcoin",
        "documentation": {}
    },
    {
        "label": "CardPayList",
        "importPath": "resources.cardpay",
        "description": "resources.cardpay",
        "isExtraImport": true,
        "detail": "resources.cardpay",
        "documentation": {}
    },
    {
        "label": "FavStoreList",
        "importPath": "resources.favoritestore",
        "description": "resources.favoritestore",
        "isExtraImport": true,
        "detail": "resources.favoritestore",
        "documentation": {}
    },
    {
        "label": "CartStatusList",
        "importPath": "resources.cartstatus",
        "description": "resources.cartstatus",
        "isExtraImport": true,
        "detail": "resources.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartSystemList",
        "importPath": "resources.cartsystem",
        "description": "resources.cartsystem",
        "isExtraImport": true,
        "detail": "resources.cartsystem",
        "documentation": {}
    },
    {
        "label": "CartProductList",
        "importPath": "resources.cartproduct",
        "description": "resources.cartproduct",
        "isExtraImport": true,
        "detail": "resources.cartproduct",
        "documentation": {}
    },
    {
        "label": "StoreemailList",
        "importPath": "resources.storeemail",
        "description": "resources.storeemail",
        "isExtraImport": true,
        "detail": "resources.storeemail",
        "documentation": {}
    },
    {
        "label": "StorelocList",
        "importPath": "resources.storelocation",
        "description": "resources.storelocation",
        "isExtraImport": true,
        "detail": "resources.storelocation",
        "documentation": {}
    },
    {
        "label": "StorephoneList",
        "importPath": "resources.storephone",
        "description": "resources.storephone",
        "isExtraImport": true,
        "detail": "resources.storephone",
        "documentation": {}
    },
    {
        "label": "RatingTypeList",
        "importPath": "resources.ratingtype",
        "description": "resources.ratingtype",
        "isExtraImport": true,
        "detail": "resources.ratingtype",
        "documentation": {}
    },
    {
        "label": "ReviewList",
        "importPath": "resources.review",
        "description": "resources.review",
        "isExtraImport": true,
        "detail": "resources.review",
        "documentation": {}
    },
    {
        "label": "IMAGEDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class IMAGEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass VIDEODELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass AUDIODELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DOCUMENTDELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "VIDEODELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class VIDEODELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass AUDIODELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DOCUMENTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass SCRIPTDELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "AUDIODELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class AUDIODELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DOCUMENTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass SCRIPTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ARCHIVEDELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "DOCUMENTDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class DOCUMENTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass SCRIPTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ARCHIVEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass EXECUTABLEDELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "SCRIPTDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class SCRIPTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ARCHIVEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass EXECUTABLEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass TEXTDELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "ARCHIVEDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class ARCHIVEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass EXECUTABLEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass TEXTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DATADELETEEXCEPTION(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "EXECUTABLEDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class EXECUTABLEDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass TEXTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DATADELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILEFORMAT(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "TEXTDELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class TEXTDELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass DATADELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILEFORMAT(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILETYPE(Exception):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "DATADELETEEXCEPTION",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class DATADELETEEXCEPTION(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILEFORMAT(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILETYPE(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nTYPE_EXEPTION_DICT = {",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "INVALIDFILEFORMAT",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class INVALIDFILEFORMAT(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass INVALIDFILETYPE(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nTYPE_EXEPTION_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "INVALIDFILETYPE",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class INVALIDFILETYPE(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nTYPE_EXEPTION_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "FileHelper",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class FileHelper:\n    pass\nclass LocalStoreHelper:\n    pass\nclass CloudinaryHelper:\n    pass\nclass S3BucketHelper:\n    pass\n# function to choose the file format\ndef choose_format_exception(file_type, err=None):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "LocalStoreHelper",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class LocalStoreHelper:\n    pass\nclass CloudinaryHelper:\n    pass\nclass S3BucketHelper:\n    pass\n# function to choose the file format\ndef choose_format_exception(file_type, err=None):\n    file_type = file_type.lower()\n    if file_type in TYPE_EXEPTION_DICT.keys():",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "CloudinaryHelper",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class CloudinaryHelper:\n    pass\nclass S3BucketHelper:\n    pass\n# function to choose the file format\ndef choose_format_exception(file_type, err=None):\n    file_type = file_type.lower()\n    if file_type in TYPE_EXEPTION_DICT.keys():\n        raise globals()[f\"{TYPE_EXEPTION_DICT[file_type]}ELETEEXCEPTION\"](err)\n    else:",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "S3BucketHelper",
        "kind": 6,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "class S3BucketHelper:\n    pass\n# function to choose the file format\ndef choose_format_exception(file_type, err=None):\n    file_type = file_type.lower()\n    if file_type in TYPE_EXEPTION_DICT.keys():\n        raise globals()[f\"{TYPE_EXEPTION_DICT[file_type]}ELETEEXCEPTION\"](err)\n    else:\n        raise INVALIDFILETYPE\n# function to send user a file",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "choose_format_exception",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def choose_format_exception(file_type, err=None):\n    file_type = file_type.lower()\n    if file_type in TYPE_EXEPTION_DICT.keys():\n        raise globals()[f\"{TYPE_EXEPTION_DICT[file_type]}ELETEEXCEPTION\"](err)\n    else:\n        raise INVALIDFILETYPE\n# function to send user a file\ndef send_user_file(folder: str, filename: str, name: str = None):\n    if name:\n        return send_file(filename_or_fp=name)",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "send_user_file",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def send_user_file(folder: str, filename: str, name: str = None):\n    if name:\n        return send_file(filename_or_fp=name)\n    name = folder+filename\n    return send_file(filename_or_fp=name)\n# save a file in db\ndef _save_file(file_: FileStorage, folder: str = None, name: str = None, file_type: str =\"image\") -> str:\n    \"\"\" Takes a filestorage and saves it to a folder\"\"\"\n    file_type = file_type.lower()\n    if file_type in TYPESET_DICT.keys():",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "get_path",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def get_path(filename: str = None, folder: str = None, file_type: str =\"image\") -> str:\n    \"\"\" Takes a file name, folder and returns a full path\"\"\"\n    file_type = file_type.lower()\n    if file_type in TYPESET_DICT.keys():\n        return globals()[f\"{TYPESET_DICT[file_type]}_SET\"].path(filename, folder)\n    else:\n        raise INVALIDFILETYPE\n# find all files in a directory\ndef find_all_files_in_dir(folder_path: str) -> Union[str, None]:\n    return os.listdir(folder_path)",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "find_all_files_in_dir",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def find_all_files_in_dir(folder_path: str) -> Union[str, None]:\n    return os.listdir(folder_path)\n# delete a file in the dir\ndef delete_file_in_dir(folder_path: str, filename: str, file_type: str =\"image\"):\n    filename = get_basename(str(filename))\n    file_path = folder_path+filename\n    try:\n        os.remove(file_path)\n    except FileNotFoundError:\n        raise FileNotFoundError",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "delete_file_in_dir",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def delete_file_in_dir(folder_path: str, filename: str, file_type: str =\"image\"):\n    filename = get_basename(str(filename))\n    file_path = folder_path+filename\n    try:\n        os.remove(file_path)\n    except FileNotFoundError:\n        raise FileNotFoundError\n    except Exception as e:\n        print(e)\n        file_type = file_type.lower()",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "delete_all_file_in_dir",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def delete_all_file_in_dir(folder_path: str, file_type: str =\"image\") -> None:\n    all_files = find_all_files_in_dir(folder_path=folder_path)\n    for file_base in all_files:\n        try:\n            os.remove(folder_path+file_base)\n        except Exception as e:\n            choose_format_exception(file_type=file_type,err=e)\n    return folder_path\n# delete all file in a dir except\ndef delete_all_file_in_dir_except(folder_path: str, filename: str, file_type: str =\"image\"):",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "delete_all_file_in_dir_except",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def delete_all_file_in_dir_except(folder_path: str, filename: str, file_type: str =\"image\"):\n    all_files = find_all_files_in_dir(folder_path=folder_path)\n    file_path = folder_path+filename\n    for file_base in all_files:\n        if file_base == filename:\n            continue\n        try:\n            os.remove(folder_path+file_base)\n        except Exception as e:\n            choose_format_exception(file_type=file_type,err=e)",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "find_file_any_format",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def find_file_any_format(filename: str, folder: str, file_type: str =\"image\") -> Union[str, None]:\n    \"\"\"\n    Takes a filename and returns an image on any of the accepted formats.\n    \"\"\"\n    if file_type in FILETYPE_DICT.keys():\n        for _format in globals()[f\"{FILETYPE_DICT[file_type]}\"]:\n            file_ = f\"{filename}.{_format}\"\n            file_path = globals()[f\"{TYPESET_DICT[file_type]}_SET\"].path(filename=file_, folder=folder)\n            if os.path.isfile(file_path):\n                return file_path",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "find_file_curr_format",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def find_file_curr_format(file_basename: str, folder: str, file_type: str =\"image\") -> Union[str, None]:\n    \"\"\"\n    Takes a filename and returns an image on any of the accepted formats.\n    \"\"\"\n    if file_type in FILETYPE_DICT.keys():\n        file_path = globals()[f\"{TYPESET_DICT[file_type]}_SET\"].path(filename=file_basename, folder=folder)\n        if os.path.isfile(file_path):\n            return file_path\n    else:\n        raise INVALIDFILETYPE",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "is_filename_safe",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def is_filename_safe(file_: Union[str, FileStorage]) -> bool:\n    \"\"\" check our regex and return whether the string matches or not\"\"\"\n    filename = _retrieve_filename(file_)\n    allowed_format = \"|\".join(IMAGES)  # png|svg|jpg|jpeg|png\n    regex = f\"^[a-zA-Z0-9][a-zA-Z0-9_()-\\.]*\\.({allowed_format})$\"\n    return re.match(regex, filename) is not None\ndef get_basename(file_: Union[str, FileStorage]) -> str:\n    \"\"\" \n        Returns fullname of image in the path.\n        get_basename(\"some/folder/image.jpg\") returns \"image.jpg\"",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "get_basename",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def get_basename(file_: Union[str, FileStorage]) -> str:\n    \"\"\" \n        Returns fullname of image in the path.\n        get_basename(\"some/folder/image.jpg\") returns \"image.jpg\"\n    \"\"\"\n    filename = _retrieve_filename(file_)\n    return os.path.split(filename)[1]\ndef get_file_name(file_: Union[str, FileStorage], file_type: str =\"image\") -> str:\n    \"\"\" \n        Returns image name without the extension.",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "get_file_name",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def get_file_name(file_: Union[str, FileStorage], file_type: str =\"image\") -> str:\n    \"\"\" \n        Returns image name without the extension.\n        get_basename(\"some/folder/image.jpg\") returns \"image\"\n    \"\"\"\n    filename = _retrieve_filename(file_)\n    filename = os.path.split(filename)[1]\n    return filename.split(\".\")[0]\ndef get_extension(file_: Union[str, FileStorage]) -> str:\n    \"\"\" ",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "get_extension",
        "kind": 2,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "def get_extension(file_: Union[str, FileStorage]) -> str:\n    \"\"\" \n        Returns file extension \n        get_extension(\"image.jpg\") returns \".jpg\"\n    \"\"\"\n    filename = _retrieve_filename(file_)\n    return os.path.splitext(filename)[1]",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "VIDEOS",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "VIDEOS = tuple('mp4'.split())\nflask_uploads.DEFAULTS = flask_uploads.DEFAULTS + VIDEOS\nFILETYPE_DICT = {\n                    \"image\" : \"IMAGES\",\n                    \"video\" : \"VIDEOS\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENTS\",\n                    \"script\" : \"SCRIPTS\",\n                    \"archive\" : \"ARCHIVES\",\n                    \"executable\" : \"EXECUTABLES\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "flask_uploads.DEFAULTS",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "flask_uploads.DEFAULTS = flask_uploads.DEFAULTS + VIDEOS\nFILETYPE_DICT = {\n                    \"image\" : \"IMAGES\",\n                    \"video\" : \"VIDEOS\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENTS\",\n                    \"script\" : \"SCRIPTS\",\n                    \"archive\" : \"ARCHIVES\",\n                    \"executable\" : \"EXECUTABLES\",\n                    \"text\" : \"TEXT\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "FILETYPE_DICT",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "FILETYPE_DICT = {\n                    \"image\" : \"IMAGES\",\n                    \"video\" : \"VIDEOS\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENTS\",\n                    \"script\" : \"SCRIPTS\",\n                    \"archive\" : \"ARCHIVES\",\n                    \"executable\" : \"EXECUTABLES\",\n                    \"text\" : \"TEXT\",\n                    \"data\" : \"DATA\"",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "IMAGE_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "IMAGE_SET = UploadSet(\"image\", IMAGES)  # set name and allowed extensions\nVIDEO_SET = UploadSet(\"video\", VIDEOS)  # set name and allowed extensions\nAUDIO_SET = UploadSet(\"audio\", AUDIO)  # set name and allowed extensions\nDOCUMENT_SET = UploadSet(\"document\", DOCUMENTS)  # set name and allowed extensions\nSCRIPT_SET = UploadSet(\"script\", SCRIPTS)  # set name and allowed extensions\nARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "VIDEO_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "VIDEO_SET = UploadSet(\"video\", VIDEOS)  # set name and allowed extensions\nAUDIO_SET = UploadSet(\"audio\", AUDIO)  # set name and allowed extensions\nDOCUMENT_SET = UploadSet(\"document\", DOCUMENTS)  # set name and allowed extensions\nSCRIPT_SET = UploadSet(\"script\", SCRIPTS)  # set name and allowed extensions\nARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "AUDIO_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "AUDIO_SET = UploadSet(\"audio\", AUDIO)  # set name and allowed extensions\nDOCUMENT_SET = UploadSet(\"document\", DOCUMENTS)  # set name and allowed extensions\nSCRIPT_SET = UploadSet(\"script\", SCRIPTS)  # set name and allowed extensions\nARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "DOCUMENT_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "DOCUMENT_SET = UploadSet(\"document\", DOCUMENTS)  # set name and allowed extensions\nSCRIPT_SET = UploadSet(\"script\", SCRIPTS)  # set name and allowed extensions\nARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "SCRIPT_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "SCRIPT_SET = UploadSet(\"script\", SCRIPTS)  # set name and allowed extensions\nARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "ARCHIVE_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "ARCHIVE_SET = UploadSet(\"archive\", ARCHIVES)  # set name and allowed extensions\nEXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "EXECUTABLE_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "EXECUTABLE_SET = UploadSet(\"executable\", EXECUTABLES)  # set name and allowed extensions\nTEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "TEXT_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "TEXT_SET = UploadSet(\"text\", TEXT)  # set name and allowed extensions\nDATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",\n                    \"executable\" : \"EXECUTABLE\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "DATA_SET",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "DATA_SET = UploadSet(\"data\", DATA)  # set name and allowed extensions\nTYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",\n                    \"executable\" : \"EXECUTABLE\",\n                    \"text\" : \"TEXT\",",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "TYPESET_DICT",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "TYPESET_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",\n                    \"executable\" : \"EXECUTABLE\",\n                    \"text\" : \"TEXT\",\n                    \"data\" : \"DATA\"",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "TYPE_EXEPTION_DICT",
        "kind": 5,
        "importPath": "libs.file_helper",
        "description": "libs.file_helper",
        "peekOfCode": "TYPE_EXEPTION_DICT = {\n                    \"image\" : \"IMAGE\",\n                    \"video\" : \"VIDEO\",\n                    \"audio\" : \"AUDIO\",\n                    \"document\" : \"DOCUMENT\",\n                    \"script\" : \"SCRIPT\",\n                    \"archive\" : \"ARCHIVE\",\n                    \"executable\" : \"EXECUTABLE\",\n                    \"text\" : \"TEXT\",\n                    \"data\" : \"DATA\"",
        "detail": "libs.file_helper",
        "documentation": {}
    },
    {
        "label": "MailerException",
        "kind": 6,
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "peekOfCode": "class MailerException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass Sender:\n    MAILER_USR = os.environ.get(\"MAILER_USR\", None)\n    MAILER_PWD = os.environ.get(\"MAILER_PWD\", None)\n    @classmethod\n    def send_email(cls, to, subject, html, text=None, from_=None) -> Response:\n        sender = cls.acquire_sender()\n        from_ = from_ if from_ else cls.MAILER_USR",
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "Sender",
        "kind": 6,
        "importPath": "libs.mailer",
        "description": "libs.mailer",
        "peekOfCode": "class Sender:\n    MAILER_USR = os.environ.get(\"MAILER_USR\", None)\n    MAILER_PWD = os.environ.get(\"MAILER_PWD\", None)\n    @classmethod\n    def send_email(cls, to, subject, html, text=None, from_=None) -> Response:\n        sender = cls.acquire_sender()\n        from_ = from_ if from_ else cls.MAILER_USR\n        msg = Message(\n            From=from_,\n            To=to,",
        "detail": "libs.mailer",
        "documentation": {}
    },
    {
        "label": "TranslatorException",
        "kind": 6,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "class TranslatorException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass TRANSERRKEYNOTFOUND(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\ndefault_locale = \"en-us\"\ncached_strings = {}\ndef change_locale(locale):\n    set_default_locale(locale=locale)",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "TRANSERRKEYNOTFOUND",
        "kind": 6,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "class TRANSERRKEYNOTFOUND(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\ndefault_locale = \"en-us\"\ncached_strings = {}\ndef change_locale(locale):\n    set_default_locale(locale=locale)\n    refresh()\ndef set_default_locale(locale):\n    global default_locale",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "change_locale",
        "kind": 2,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "def change_locale(locale):\n    set_default_locale(locale=locale)\n    refresh()\ndef set_default_locale(locale):\n    global default_locale\n    default_locale = locale\ndef refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "set_default_locale",
        "kind": 2,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "def set_default_locale(locale):\n    global default_locale\n    default_locale = locale\ndef refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\ndef gettext(get_err):\n    try:\n        return cached_strings[get_err]",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "refresh",
        "kind": 2,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "def refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:\n        cached_strings = json.load(f)\ndef gettext(get_err):\n    try:\n        return cached_strings[get_err]\n    except Exception as e:\n        print(e)\n        raise TRANSERRKEYNOTFOUND(cached_strings.get(\"err_key_not_found\"))",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "gettext",
        "kind": 2,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "def gettext(get_err):\n    try:\n        return cached_strings[get_err]\n    except Exception as e:\n        print(e)\n        raise TRANSERRKEYNOTFOUND(cached_strings.get(\"err_key_not_found\"))\nrefresh()",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "default_locale",
        "kind": 5,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "default_locale = \"en-us\"\ncached_strings = {}\ndef change_locale(locale):\n    set_default_locale(locale=locale)\n    refresh()\ndef set_default_locale(locale):\n    global default_locale\n    default_locale = locale\ndef refresh():\n    global cached_strings",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "cached_strings",
        "kind": 5,
        "importPath": "libs.strings",
        "description": "libs.strings",
        "peekOfCode": "cached_strings = {}\ndef change_locale(locale):\n    set_default_locale(locale=locale)\n    refresh()\ndef set_default_locale(locale):\n    global default_locale\n    default_locale = locale\ndef refresh():\n    global cached_strings\n    with open(f\"strings/{default_locale}.json\") as f:",
        "detail": "libs.strings",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('productcat', sa.Column('avatar', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('productcat', 'avatar')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('productcat', 'avatar')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "revision = '5b5008f591ff'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('productcat', sa.Column('avatar', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('productcat', sa.Column('avatar', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('productcat', 'avatar')",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('productcat', sa.Column('avatar', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('productcat', 'avatar')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.5b5008f591ff_",
        "description": "migrations.versions.5b5008f591ff_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('productcat', sa.Column('avatar', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('productcat', 'avatar')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.5b5008f591ff_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option(\n    'sqlalchemy.url',\n    str(current_app.extensions['migrate'].db.engine.url).replace('%', '%%'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = current_app.extensions['migrate'].db.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "BitcoinPayModel",
        "kind": 6,
        "importPath": "models.bitcoin",
        "description": "models.bitcoin",
        "peekOfCode": "class BitcoinPayModel(db.Model, ModelsHelper):\n    __tablename__ = \"bitcoin\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"))\n    wallet_address = db.Column(db.String(256))",
        "detail": "models.bitcoin",
        "documentation": {}
    },
    {
        "label": "CardpayModel",
        "kind": 6,
        "importPath": "models.cardpay",
        "description": "models.cardpay",
        "peekOfCode": "class CardpayModel(db.Model, ModelsHelper):\n    __tablename__ = \"cardpay\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"))\n    card_num = db.Column(db.String(256))\n    card_cvv = db.Column(db.String(3))\n    card_exp = db.Column(db.DateTime)\n    created = db.Column(\n        db.DateTime, index=False, unique=False, nullable=False, default=dt.now",
        "detail": "models.cardpay",
        "documentation": {}
    },
    {
        "label": "CartProductModel",
        "kind": 6,
        "importPath": "models.cartproduct",
        "description": "models.cartproduct",
        "peekOfCode": "class CartProductModel(db.Model, ModelsHelper):\n    __tablename__ = \"cartproduct\"\n    # columns\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    product_id = db.Column(db.String(50), db.ForeignKey(\"product.id\"), nullable=False)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"), nullable=False)\n    cartsystemid = db.Column(db.Integer, db.ForeignKey(\"cartsystem.id\"), nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    created = db.Column(\n        db.DateTime, index=False, unique=False, nullable=False, default=dt.now",
        "detail": "models.cartproduct",
        "documentation": {}
    },
    {
        "label": "CartStatusModel",
        "kind": 6,
        "importPath": "models.cartstatus",
        "description": "models.cartstatus",
        "peekOfCode": "class CartStatusModel(db.Model, ModelsHelper):\n    __tablename__ = \"cartstatus\"\n    # columns\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(20))\n    @classmethod\n    def find_by_productid(cls, product_id=None):\n        result = cls.query.filter_by(product_id=product_id).first()\n        return result",
        "detail": "models.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartSystemModel",
        "kind": 6,
        "importPath": "models.cartsystem",
        "description": "models.cartsystem",
        "peekOfCode": "class CartSystemModel(db.Model, ModelsHelper):\n    __tablename__ = \"cartsystem\"\n    # columns\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    statustime = db.Column(db.DateTime, index=False, unique=False, nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"), nullable=False)\n    status = db.Column(db.Integer, db.ForeignKey(\"cartstatus.id\"), nullable=False)\n    # merge\n    # user = db.relationship(\"UserModel\")",
        "detail": "models.cartsystem",
        "documentation": {}
    },
    {
        "label": "ColorsModel",
        "kind": 6,
        "importPath": "models.colors",
        "description": "models.colors",
        "peekOfCode": "class ColorsModel(db.Model, ModelsHelper):\n    __tablename__ = \"colors\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(256), nullable=False)\n    productcol = db.relationship(\n        \"ProductColorModel\",\n        lazy=\"dynamic\",\n        backref=\"colors\",\n        cascade=\"all, delete-orphan\",",
        "detail": "models.colors",
        "documentation": {}
    },
    {
        "label": "ConfirmationModel",
        "kind": 6,
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "peekOfCode": "class ConfirmationModel(db.Model, ModelsHelper):\n    __tablename__ = \"confirmation\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True)\n    expire_at = db.Column(db.Integer, unique=False, nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    confirmed = db.Column(db.Boolean, nullable=False, default=False)\n    eight_digit = db.Column(db.String(8), nullable=False)\n    # merge (for sqlalchemy to link tables)\n    def __init__(self, user_id: int, **kwargs):",
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "CONFIRMATION_EXPIRATION_DELTA",
        "kind": 5,
        "importPath": "models.confirmation",
        "description": "models.confirmation",
        "peekOfCode": "CONFIRMATION_EXPIRATION_DELTA = 1800  # 30 MINUTES\n# class to create user and get user\nclass ConfirmationModel(db.Model, ModelsHelper):\n    __tablename__ = \"confirmation\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True)\n    expire_at = db.Column(db.Integer, unique=False, nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    confirmed = db.Column(db.Boolean, nullable=False, default=False)\n    eight_digit = db.Column(db.String(8), nullable=False)",
        "detail": "models.confirmation",
        "documentation": {}
    },
    {
        "label": "FavStoreModel",
        "kind": 6,
        "importPath": "models.favoritestore",
        "description": "models.favoritestore",
        "peekOfCode": "class FavStoreModel(db.Model, ModelsHelper):\n    __tablename__ = \"favstore\"\n    # class variable\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"))\n    @classmethod\n    def find_by_store_id(cls, store_id=None):\n        result = cls.query.filter_by(\n            store_id=store_id,",
        "detail": "models.favoritestore",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordModel",
        "kind": 6,
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "peekOfCode": "class ForgotPasswordModel(db.Model, ModelsHelper):\n    __tablename__ = \"forgotpassword\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True)\n    expire_at = db.Column(db.Integer, unique=False, nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    used = db.Column(db.Boolean, nullable=False, default=False)\n    eight_digit = db.Column(db.String(8), nullable=False)\n    # merge (for sqlalchemy to link tables)\n    def __init__(self, user_id: int, **kwargs):",
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "FORGOT_PASSWORD_EXPIRATION_DELTA",
        "kind": 5,
        "importPath": "models.forgot_password",
        "description": "models.forgot_password",
        "peekOfCode": "FORGOT_PASSWORD_EXPIRATION_DELTA = 1800  # 30 MINUTES\n# class to create user and get user\nclass ForgotPasswordModel(db.Model, ModelsHelper):\n    __tablename__ = \"forgotpassword\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True)\n    expire_at = db.Column(db.Integer, unique=False, nullable=False)\n    user_id = db.Column(db.String(50), db.ForeignKey(\"users.id\"), nullable=False)\n    used = db.Column(db.Boolean, nullable=False, default=False)\n    eight_digit = db.Column(db.String(8), nullable=False)",
        "detail": "models.forgot_password",
        "documentation": {}
    },
    {
        "label": "LocationModel",
        "kind": 6,
        "importPath": "models.location",
        "description": "models.location",
        "peekOfCode": "class LocationModel(db.Model, ModelsHelper):\n    __tablename__ = \"location\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    address = db.Column(db.String(300))\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    @classmethod\n    def find_by_store_id(cls, store_id=None):\n        result = cls.query.filter_by(\n            store_id=store_id,\n        ).first()",
        "detail": "models.location",
        "documentation": {}
    },
    {
        "label": "ModelHelperException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ModelHelperException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass UserException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ConfirmationException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ColorException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "UserException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class UserException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ConfirmationException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ColorException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ForgotPasswordException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ConfirmationException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ConfirmationException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ColorException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ForgotPasswordException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ColorException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ColorException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ForgotPasswordException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductCatException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ForgotPasswordException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSizeException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ProductException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ProductException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSizeException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSubCatException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ProductCatException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ProductCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSizeException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSubCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass StoreException(Exception):",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ProductSizeException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ProductSizeException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ProductSubCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass StoreException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ModelsHelper:",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ProductSubCatException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ProductSubCatException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass StoreException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ModelsHelper:\n    def delete_from_db(self, get_err=\"Internal_server_error\"):\n        try:\n            db.session.delete(self)",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "StoreException",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class StoreException(Exception):\n    def __init__(self, message: str):\n        super().__init__(message)\nclass ModelsHelper:\n    def delete_from_db(self, get_err=\"Internal_server_error\"):\n        try:\n            db.session.delete(self)\n            db.session.commit()\n        except Exception as e:\n            try:",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "ModelsHelper",
        "kind": 6,
        "importPath": "models.models_helper",
        "description": "models.models_helper",
        "peekOfCode": "class ModelsHelper:\n    def delete_from_db(self, get_err=\"Internal_server_error\"):\n        try:\n            db.session.delete(self)\n            db.session.commit()\n        except Exception as e:\n            try:\n                raise ModelHelperException(gettext(get_err).format(e))\n            except:\n                raise ModelHelperException(gettext(get_err))",
        "detail": "models.models_helper",
        "documentation": {}
    },
    {
        "label": "PaymentModel",
        "kind": 6,
        "importPath": "models.payment",
        "description": "models.payment",
        "peekOfCode": "class PaymentModel(db.Model, ModelsHelper):\n    __tablename__ = \"payment\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    status_code_id = db.Column(db.Integer, db.ForeignKey(\"paystatus.id\"))\n    purchaser_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))",
        "detail": "models.payment",
        "documentation": {}
    },
    {
        "label": "PaytypeModel",
        "kind": 6,
        "importPath": "models.paymenttype",
        "description": "models.paymenttype",
        "peekOfCode": "class PaytypeModel(db.Model, ModelsHelper):\n    __tablename__ = \"paytype\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(30))",
        "detail": "models.paymenttype",
        "documentation": {}
    },
    {
        "label": "PaystatusModel",
        "kind": 6,
        "importPath": "models.paystatus",
        "description": "models.paystatus",
        "peekOfCode": "class PaystatusModel(db.Model, ModelsHelper):\n    __tablename__ = \"paystatus\"\n    id = db.Column(db.Integer, primary_key=True)\n    paymenttype = db.Column(db.Integer)",
        "detail": "models.paystatus",
        "documentation": {}
    },
    {
        "label": "ProductModel",
        "kind": 6,
        "importPath": "models.product",
        "description": "models.product",
        "peekOfCode": "class ProductModel(db.Model, ModelsHelper):\n    __tablename__ = \"product\"\n    id = db.Column(\n        db.String(50), primary_key=True, unique=True, default=create_id, nullable=False\n    )\n    productname = db.Column(db.String(40), nullable=False)\n    description = db.Column(db.String(200), nullable=True)\n    avatar = db.Column(db.String, nullable=True, default=None)\n    store_id = db.Column(\n        db.String(50),",
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "create_id",
        "kind": 2,
        "importPath": "models.product",
        "description": "models.product",
        "peekOfCode": "def create_id(context):\n    return \"PRODUCT-V1-\" + uuid4().hex\nclass ProductModel(db.Model, ModelsHelper):\n    __tablename__ = \"product\"\n    id = db.Column(\n        db.String(50), primary_key=True, unique=True, default=create_id, nullable=False\n    )\n    productname = db.Column(db.String(40), nullable=False)\n    description = db.Column(db.String(200), nullable=True)\n    avatar = db.Column(db.String, nullable=True, default=None)",
        "detail": "models.product",
        "documentation": {}
    },
    {
        "label": "ProductCatModel",
        "kind": 6,
        "importPath": "models.productcat",
        "description": "models.productcat",
        "peekOfCode": "class ProductCatModel(db.Model, ModelsHelper):\n    __tablename__ = \"productcat\"\n    # columns\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(256), unique=True, nullable=False)\n    avatar = db.Column(db.String, nullable=True, default=None)\n    # merge\n    products = db.relationship(\n        \"ProductModel\",\n        lazy=\"dynamic\",",
        "detail": "models.productcat",
        "documentation": {}
    },
    {
        "label": "ProductColorModel",
        "kind": 6,
        "importPath": "models.productcol",
        "description": "models.productcol",
        "peekOfCode": "class ProductColorModel(db.Model, ModelsHelper):\n    __tablename__ = \"productcol\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    product_id = db.Column(\n        db.String(50), db.ForeignKey(\"product.id\"), unique=False, nullable=False\n    )\n    color_id = db.Column(\n        db.Integer, db.ForeignKey(\"colors.id\"), unique=False, nullable=False\n    )",
        "detail": "models.productcol",
        "documentation": {}
    },
    {
        "label": "ProductSizeModel",
        "kind": 6,
        "importPath": "models.productsize",
        "description": "models.productsize",
        "peekOfCode": "class ProductSizeModel(db.Model, ModelsHelper):\n    __tablename__ = \"productsize\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    productcat_id = db.Column(\n        db.Integer, db.ForeignKey(\"productcat.id\"), nullable=False\n    )\n    productsubcat_id = db.Column(\n        db.Integer, db.ForeignKey(\"productsubcat.id\"), nullable=False\n    )",
        "detail": "models.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSubCatModel",
        "kind": 6,
        "importPath": "models.productsubcat",
        "description": "models.productsubcat",
        "peekOfCode": "class ProductSubCatModel(db.Model, ModelsHelper):\n    __tablename__ = \"productsubcat\"\n    # columns\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    # gatta change this to productcatid\n    category_id = db.Column(db.Integer, db.ForeignKey(\"productcat.id\"), nullable=False)\n    desc = db.Column(db.String(256), unique=False, nullable=False)\n    # merge\n    products = db.relationship(\n        \"ProductModel\",",
        "detail": "models.productsubcat",
        "documentation": {}
    },
    {
        "label": "RatingTypeModel",
        "kind": 6,
        "importPath": "models.ratingtype",
        "description": "models.ratingtype",
        "peekOfCode": "class RatingTypeModel(db.Model, ModelsHelper):\n    __tablename__ = \"ratingtype\"\n    # class variables\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(256))\n    # merge\n    reviews = db.relationship(\n        \"ReviewModel\",\n        lazy=\"dynamic\",\n        backref=\"ratingtype\",",
        "detail": "models.ratingtype",
        "documentation": {}
    },
    {
        "label": "ReviewModel",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class ReviewModel(db.Model, ModelsHelper):\n    __tablename__ = \"review\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    review = db.Column(db.String(400))\n    product_id = db.Column(\n        db.String(50),\n        db.ForeignKey(\"product.id\"),\n        index=False,\n        unique=False,\n        nullable=False,",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "StoreModel",
        "kind": 6,
        "importPath": "models.store",
        "description": "models.store",
        "peekOfCode": "class StoreModel(db.Model, ModelsHelper):\n    __tablename__ = \"store\"\n    # class variable\n    id = db.Column(db.String(50), primary_key=True, unique=True, default=create_id)\n    storename = db.Column(db.String(40), unique=True, nullable=False)\n    user_id = db.Column(\n        db.String(50),\n        db.ForeignKey(\n            \"users.id\",\n        ),",
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "create_id",
        "kind": 2,
        "importPath": "models.store",
        "description": "models.store",
        "peekOfCode": "def create_id(context):\n    return \"MAISTORE-V1-\" + uuid4().hex\nclass StoreModel(db.Model, ModelsHelper):\n    __tablename__ = \"store\"\n    # class variable\n    id = db.Column(db.String(50), primary_key=True, unique=True, default=create_id)\n    storename = db.Column(db.String(40), unique=True, nullable=False)\n    user_id = db.Column(\n        db.String(50),\n        db.ForeignKey(",
        "detail": "models.store",
        "documentation": {}
    },
    {
        "label": "StoreemailModel",
        "kind": 6,
        "importPath": "models.storeemail",
        "description": "models.storeemail",
        "peekOfCode": "class StoreemailModel(db.Model, ModelsHelper):\n    __tablename__ = \"storemail\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    store_mail = db.Column(db.String(300))",
        "detail": "models.storeemail",
        "documentation": {}
    },
    {
        "label": "StorelocModel",
        "kind": 6,
        "importPath": "models.storelocation",
        "description": "models.storelocation",
        "peekOfCode": "class StorelocModel(db.Model, ModelsHelper):\n    __tablename__ = \"storelocation\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    store_address = db.Column(db.String(300))",
        "detail": "models.storelocation",
        "documentation": {}
    },
    {
        "label": "StorephoneModel",
        "kind": 6,
        "importPath": "models.storephone",
        "description": "models.storephone",
        "peekOfCode": "class StorephoneModel(db.Model, ModelsHelper):\n    __tablename__ = \"storephone\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    store_phoneno = db.Column(db.String(300))",
        "detail": "models.storephone",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "class UserModel(db.Model, ModelsHelper):\n    __tablename__ = \"users\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True, default=create_id)\n    lga = db.Column(db.String(30), nullable=True)\n    state = db.Column(db.String(30), nullable=True)\n    address = db.Column(db.String(300), nullable=True)\n    middlename = db.Column(db.String(30), index=False, unique=False, nullable=True)\n    lastname = db.Column(db.String(30), index=False, unique=False, nullable=True)\n    firstname = db.Column(db.String(30), index=False, unique=False, nullable=True)",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "create_id",
        "kind": 2,
        "importPath": "models.users",
        "description": "models.users",
        "peekOfCode": "def create_id(context):\n    return \"USER-V1-\" + uuid4().hex\ndef _images(context):\n    return context.image\n# class to create user and get user\nclass UserModel(db.Model, ModelsHelper):\n    __tablename__ = \"users\"\n    # columns\n    id = db.Column(db.String(50), primary_key=True, unique=True, default=create_id)\n    lga = db.Column(db.String(30), nullable=True)",
        "detail": "models.users",
        "documentation": {}
    },
    {
        "label": "BitcoinList",
        "kind": 6,
        "importPath": "resources.bitcoin",
        "description": "resources.bitcoin",
        "peekOfCode": "class BitcoinList(Resource):\n    @jwt_required\n    def get(self):\n        bitcoins = BitcoinPayModel.find_all()\n        if bitcoins:\n            return {\"message\": gettext(\"work_in_progress\")}, 400\n            # return {\"bitcoins\": [bitcoin.json() for bitcoin in bitcoins]}, 201\n        return {\"message\": gettext(\"bitcoin_not_found\")}, 404",
        "detail": "resources.bitcoin",
        "documentation": {}
    },
    {
        "label": "CardPayList",
        "kind": 6,
        "importPath": "resources.cardpay",
        "description": "resources.cardpay",
        "peekOfCode": "class CardPayList(Resource):\n    @jwt_required\n    def get(self):\n        cardpays = CardpayModel.find_all()\n        if cardpays:\n            return {\"message\": gettext(\"work_in_progress\")}, 400\n            # return {\"cardpays\": [cardpay.json() for cardpay in cardpays]}, 201\n        return {\"message\": gettext(\"cardpay_not_found\")}, 404",
        "detail": "resources.cardpay",
        "documentation": {}
    },
    {
        "label": "CartProductList",
        "kind": 6,
        "importPath": "resources.cartproduct",
        "description": "resources.cartproduct",
        "peekOfCode": "class CartProductList(Resource):\n    @jwt_required\n    def get(self):\n        cartproducts = CartProductModel.find_all()\n        if cartproducts:\n            return {\"message\": gettext(\"work_in_progress\")}, 400\n            # return {\n            #     \"cartproducts\": [cartproduct.json() for cartproduct in cartproducts]\n            # }, 201\n        return {\"message\": gettext(\"cardproduct_not_found\")}, 404",
        "detail": "resources.cartproduct",
        "documentation": {}
    },
    {
        "label": "CartStatusList",
        "kind": 6,
        "importPath": "resources.cartstatus",
        "description": "resources.cartstatus",
        "peekOfCode": "class CartStatusList(Resource):\n    @jwt_required\n    def get(self):\n        cartstatuses = CartStatusModel.find_all()\n        if cartstatuses:\n            return {\n                \"cartstatuses\": [cartstatus.json() for cartstatus in cartstatuses]\n            }, 201\n        return {\"message\": \"Item not found\"}, 400",
        "detail": "resources.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartSystemList",
        "kind": 6,
        "importPath": "resources.cartsystem",
        "description": "resources.cartsystem",
        "peekOfCode": "class CartSystemList(Resource):\n    @jwt_required\n    def get(self):\n        cartsystems = CartSystemModel.find_all()\n        if cartsystems:\n            return {\n                \"cartsystems\": [cartsystem.json() for cartsystem in cartsystems]\n            }, 201\n        return {\"message\": \"Item not found\"}, 400",
        "detail": "resources.cartsystem",
        "documentation": {}
    },
    {
        "label": "ColorList",
        "kind": 6,
        "importPath": "resources.colors",
        "description": "resources.colors",
        "peekOfCode": "class ColorList(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls):\n        colors = ColorsModel.find_all()\n        if colors:\n            return {\"colors\": schema_many.dump(colors)}, 201\n        return {\"message\": gettext(\"color_not_found\")}, 404\n# class to add colors\nclass Color(Resource):",
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "resources.colors",
        "description": "resources.colors",
        "peekOfCode": "class Color(Resource):\n    @jwt_required\n    def get(self, color_id):\n        color = ColorsModel.find_by_id(id=color_id)\n        if color:\n            return {\"color\": schema.dump(color)}, 201\n        return {\"message\": gettext(\"color_not_found\")}, 404\n    @jwt_required\n    def post(self):\n        data = schema.load(ColorsModel.get_data_())",
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.colors",
        "description": "resources.colors",
        "peekOfCode": "schema = ColorsSchema()\nschema_many = ColorsSchema(many=True)\n# class to list all Colors\nclass ColorList(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls):\n        colors = ColorsModel.find_all()\n        if colors:\n            return {\"colors\": schema_many.dump(colors)}, 201",
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.colors",
        "description": "resources.colors",
        "peekOfCode": "schema_many = ColorsSchema(many=True)\n# class to list all Colors\nclass ColorList(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls):\n        colors = ColorsModel.find_all()\n        if colors:\n            return {\"colors\": schema_many.dump(colors)}, 201\n        return {\"message\": gettext(\"color_not_found\")}, 404",
        "detail": "resources.colors",
        "documentation": {}
    },
    {
        "label": "RequestConfirmationDigit",
        "kind": 6,
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "peekOfCode": "class RequestConfirmationDigit(Resource):\n    @classmethod\n    def post(cls):\n        \"\"\" send confirmation email \"\"\"\n        email = ConfirmationModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")\n            }, 404  # 400 is for bad request\n        msg, status_code = ConfirmationModel.request_confirmation_digit(",
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "ConfirmUser",
        "kind": 6,
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "peekOfCode": "class ConfirmUser(Resource):\n    @classmethod\n    def post(cls, email: str):\n        eight_digit = ConfirmationModel.get_data_().get(\"eight_digit\", None)\n        if eight_digit == None:\n            return {\n                \"message\": gettext(\"eight_digit_parameter_not_found\")\n            }, 404  # 400 is for bad request\n        msg, status_code = ConfirmationModel.auth_confirmation(\n            email=email, eight_digit=eight_digit",
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "ViewConfirmation",
        "kind": 6,
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "peekOfCode": "class ViewConfirmation(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, email: str):\n        \"\"\" Returns confirmations for a given user. Use for testing \"\"\"\n        msg, status_code, _ = ConfirmationModel.auth_by_admin_root(\n            get_err=\"confirmation_req_ad_priv_to_view_user_conf\"\n        )\n        if status_code != 200:\n            return msg, status_code",
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "confirmation_schema",
        "kind": 5,
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "peekOfCode": "confirmation_schema = ConfirmationSchema()\nconfirimation_schema_many = ConfirmationSchema(many=True)\n# use to request for an eight digit forgot password code\nclass RequestConfirmationDigit(Resource):\n    @classmethod\n    def post(cls):\n        \"\"\" send confirmation email \"\"\"\n        email = ConfirmationModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {",
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "confirimation_schema_many",
        "kind": 5,
        "importPath": "resources.confirmation",
        "description": "resources.confirmation",
        "peekOfCode": "confirimation_schema_many = ConfirmationSchema(many=True)\n# use to request for an eight digit forgot password code\nclass RequestConfirmationDigit(Resource):\n    @classmethod\n    def post(cls):\n        \"\"\" send confirmation email \"\"\"\n        email = ConfirmationModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")",
        "detail": "resources.confirmation",
        "documentation": {}
    },
    {
        "label": "FavStoreList",
        "kind": 6,
        "importPath": "resources.favoritestore",
        "description": "resources.favoritestore",
        "peekOfCode": "class FavStoreList(Resource):\n    @jwt_required\n    def get(self):\n        favs = FavStoreModel.find_all()\n        if favs:\n            return {gettext(\"favorites\"): [fav.json() for fav in favs]}, 201\n        return {gettext(\"message\"): gettext(\"favorite_store_not_found\")}, 400",
        "detail": "resources.favoritestore",
        "documentation": {}
    },
    {
        "label": "RequestForgotPasswordDigit",
        "kind": 6,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "class RequestForgotPasswordDigit(Resource):\n    @classmethod\n    def post(cls):\n        email = ForgotPasswordModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")\n            }, 404  # 404  not found\n        msg, status_code = ForgotPasswordModel.request_forgot_password_digit(\n            email=email",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "GetForgotPasswordId",
        "kind": 6,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "class GetForgotPasswordId(Resource):\n    @classmethod\n    def post(cls, email: str):\n        eight_digit = ForgotPasswordModel.get_data_().get(\"eight_digit\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")\n            }, 404  # 400 is for bad request\n        msg, status_code = ForgotPasswordModel.get_forgot_password(\n            email=email, eight_digit=eight_digit",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "ViewForgotPasswordRequests",
        "kind": 6,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "class ViewForgotPasswordRequests(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, email: str):\n        \"\"\" Returns forgot password requests for a given user. Use for testing \"\"\"\n        msg, status_code, _ = ForgotPasswordModel.auth_by_admin_root(\n            get_err=\"to get user confirmations\"\n        )\n        if status_code != 200:\n            return msg, status_code",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "ResetPassword",
        "kind": 6,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "class ResetPassword(Resource):\n    @classmethod\n    def post(cls, forgotpassword_id: str):\n        new_password = ForgotPasswordModel.get_data_().get(\"new_password\", None)\n        msg, status_code = ForgotPasswordModel.reset_password(\n            forgotpassword_id=forgotpassword_id, new_password=new_password\n        )\n        return msg, status_code",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "forgotpassword_schema",
        "kind": 5,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "forgotpassword_schema = ForgotPasswordSchema()\nforgotpassword_schema_many = ForgotPasswordSchema(many=True)\n# use to request for an eight digit forgot password code\nclass RequestForgotPasswordDigit(Resource):\n    @classmethod\n    def post(cls):\n        email = ForgotPasswordModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "forgotpassword_schema_many",
        "kind": 5,
        "importPath": "resources.forgot_password",
        "description": "resources.forgot_password",
        "peekOfCode": "forgotpassword_schema_many = ForgotPasswordSchema(many=True)\n# use to request for an eight digit forgot password code\nclass RequestForgotPasswordDigit(Resource):\n    @classmethod\n    def post(cls):\n        email = ForgotPasswordModel.get_data_().get(\"email\", None)\n        if email == None:\n            return {\n                \"message\": gettext(\"email_parameter_not_found\")\n            }, 404  # 404  not found",
        "detail": "resources.forgot_password",
        "documentation": {}
    },
    {
        "label": "UserAvatar",
        "kind": 6,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "class UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)\n        folder = USER_AVATAR_PATH.format(user_id)  # Users/user_1/images/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Users/user_1/images/\n        if not avatar_4_user:\n            return {\"message\": gettext(\"user_not_found\")}, 404",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "StoreAvatar",
        "kind": 6,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "class StoreAvatar(Resource):\n    @classmethod\n    def get(cls, store_id: str):\n        avatar_4_store = ModelsHelper.find_store_by_id(store_id=store_id)\n        folder = STORE_AVATAR_PATH.format(store_id)  # Stores/store_1/avatar/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Stores/store_1/avatar/\n        if not avatar_4_store:\n            return {\"message\": gettext(\"store_not_found\")}, 404\n        if not avatar_4_store.avatar:",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "ProductAvatar",
        "kind": 6,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "class ProductAvatar(Resource):\n    @classmethod\n    def get(cls, product_id: str):\n        avatar_4_product = ModelsHelper.find_product_by_id(\n            product_id=product_id)\n        folder = PRODUCT_AVATAR_PATH.format(\n            product_id)  # Stores/store_1/avatar/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Products/product_1/avatar/\n        if not avatar_4_product:",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "ProductCatAvatar",
        "kind": 6,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "class ProductCatAvatar(Resource):\n    @classmethod\n    def get(cls, productcat_id: int):\n        avatar_4_productcat = ModelsHelper.find_productcat_by_id(\n            productcat_id=productcat_id)\n        folder = PRODUCTCAT_AVATAR_PATH.format(\n            productcat_id)  # Productcats/productcat_1/avatar/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Productcats/productcat_1/avatar/\n        if not avatar_4_productcat:",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "image_schema",
        "kind": 5,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "image_schema = ImageSchema()\nUSER_AVATAR_PATH = \"Users/user_{}/avatar/\"\nSTORE_AVATAR_PATH = \"Stores/store_{}/avatar/\"\nPRODUCT_AVATAR_PATH = \"Products/product_{}/avatar/\"\nPRODUCTCAT_AVATAR_PATH = \"Productcats/productcat_{}/avatar/\"\nclass UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "USER_AVATAR_PATH",
        "kind": 5,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "USER_AVATAR_PATH = \"Users/user_{}/avatar/\"\nSTORE_AVATAR_PATH = \"Stores/store_{}/avatar/\"\nPRODUCT_AVATAR_PATH = \"Products/product_{}/avatar/\"\nPRODUCTCAT_AVATAR_PATH = \"Productcats/productcat_{}/avatar/\"\nclass UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)\n        folder = USER_AVATAR_PATH.format(user_id)  # Users/user_1/images/",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "STORE_AVATAR_PATH",
        "kind": 5,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "STORE_AVATAR_PATH = \"Stores/store_{}/avatar/\"\nPRODUCT_AVATAR_PATH = \"Products/product_{}/avatar/\"\nPRODUCTCAT_AVATAR_PATH = \"Productcats/productcat_{}/avatar/\"\nclass UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)\n        folder = USER_AVATAR_PATH.format(user_id)  # Users/user_1/images/\n        avatar_folder_path = file_helper.get_path(",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "PRODUCT_AVATAR_PATH",
        "kind": 5,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "PRODUCT_AVATAR_PATH = \"Products/product_{}/avatar/\"\nPRODUCTCAT_AVATAR_PATH = \"Productcats/productcat_{}/avatar/\"\nclass UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)\n        folder = USER_AVATAR_PATH.format(user_id)  # Users/user_1/images/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Users/user_1/images/",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "PRODUCTCAT_AVATAR_PATH",
        "kind": 5,
        "importPath": "resources.image",
        "description": "resources.image",
        "peekOfCode": "PRODUCTCAT_AVATAR_PATH = \"Productcats/productcat_{}/avatar/\"\nclass UserAvatar(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id: str):\n        avatar_4_user = ModelsHelper.find_user_by_id(user_id=user_id)\n        folder = USER_AVATAR_PATH.format(user_id)  # Users/user_1/images/\n        avatar_folder_path = file_helper.get_path(\n            filename=\"\", folder=folder)  # static/Users/user_1/images/\n        if not avatar_4_user:",
        "detail": "resources.image",
        "documentation": {}
    },
    {
        "label": "LocationModel",
        "kind": 6,
        "importPath": "resources.location",
        "description": "resources.location",
        "peekOfCode": "class LocationModel(db.Model, ModelsHelper):\n    __tablename__ = \"location\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    address = db.Column(db.String(300))\n    store_id = db.Column(db.String(50), db.ForeignKey(\"store.id\"))\n    @classmethod\n    def find_by_store_id(cls, store_id=None):\n        result = cls.query.filter_by(\n            store_id=store_id,\n        ).first()",
        "detail": "resources.location",
        "documentation": {}
    },
    {
        "label": "PaymentModel",
        "kind": 6,
        "importPath": "resources.payment",
        "description": "resources.payment",
        "peekOfCode": "class PaymentModel(db.Model, ModelsHelper):\n    __tablename__ = \"payment\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    status_code_id = db.Column(db.Integer, db.ForeignKey(\"paystatus.id\"))\n    purchaser_id = db.Column(db.Integer, db.ForeignKey(\"users.id\"))",
        "detail": "resources.payment",
        "documentation": {}
    },
    {
        "label": "PaytypeModel",
        "kind": 6,
        "importPath": "resources.paymenttype",
        "description": "resources.paymenttype",
        "peekOfCode": "class PaytypeModel(db.Model, ModelsHelper):\n    __tablename__ = \"paytype\"\n    id = db.Column(db.Integer, primary_key=True, unique=True)\n    desc = db.Column(db.String(30))",
        "detail": "resources.paymenttype",
        "documentation": {}
    },
    {
        "label": "PaystatusModel",
        "kind": 6,
        "importPath": "resources.paystatus",
        "description": "resources.paystatus",
        "peekOfCode": "class PaystatusModel(db.Model, ModelsHelper):\n    __tablename__ = \"paystatus\"\n    id = db.Column(db.Integer, primary_key=True)\n    paymenttype = db.Column(db.Integer)",
        "detail": "resources.paystatus",
        "documentation": {}
    },
    {
        "label": "ProductList",
        "kind": 6,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "class ProductList(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, pagenate=False):\n        products = ProductModel.find_all()\n        if products:\n            return {\"products\": schema_many.dump(products)}, 201\n        return {\"message\": gettext(\"product_not_found\")}, 404\n# class to get to get products using pagenate",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "ProductPagenate",
        "kind": 6,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "class ProductPagenate(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, page=1):\n        args_ = ProductModel.get_data_()\n        products = ProductModel.find_all_pagenate(page=page, **args_)\n        items = products.pop(\"items\", None)\n        products[\"products\"] = schema_many.dump(items)\n        if products.get(\"products\", None):",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "class Product(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, product_id):\n        product = ProductModel.find_by_id(id=product_id)\n        if product:\n            return {\"product\": schema.dump(product)}, 201\n        return {\"message\": gettext(\"product_not_found\")}, 400\n    # use for authentication before calling post",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "schema = ProductSchema()\nput_schema = ProductSchema(exclude=(\"store_id\",))\nschema_many = ProductSchema(many=True)\n# class to get all product\nclass ProductList(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, pagenate=False):\n        products = ProductModel.find_all()",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "put_schema",
        "kind": 5,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "put_schema = ProductSchema(exclude=(\"store_id\",))\nschema_many = ProductSchema(many=True)\n# class to get all product\nclass ProductList(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, pagenate=False):\n        products = ProductModel.find_all()\n        if products:",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.product",
        "description": "resources.product",
        "peekOfCode": "schema_many = ProductSchema(many=True)\n# class to get all product\nclass ProductList(Resource):\n    # use for authentication before calling get\n    @classmethod\n    # @jwt_optional\n    def get(cls, pagenate=False):\n        products = ProductModel.find_all()\n        if products:\n            return {\"products\": schema_many.dump(products)}, 201",
        "detail": "resources.product",
        "documentation": {}
    },
    {
        "label": "ProductCatList",
        "kind": 6,
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "peekOfCode": "class ProductCatList(Resource):\n    @classmethod\n    def get(cls):\n        productcats = ProductCatModel.find_all()\n        if productcats:\n            return {\"productcats\": schema_many.dump(productcats)}, 201\n        return {\"message\": gettext(\"product_cat_not_found\")}, 404\n# class to add product productcat\nclass ProductCat(Resource):\n    @classmethod",
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "ProductCat",
        "kind": 6,
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "peekOfCode": "class ProductCat(Resource):\n    @classmethod\n    def get(cls, cat_id):\n        productcat = ProductCatModel.find_by_id(id=cat_id)\n        if productcat:\n            return {\"productcat\": schema.dump(productcat)}, 201\n        return {\"message\": gettext(\"product_cat_not_found\")}, 404\n    @classmethod\n    @jwt_required\n    def post(cls):",
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "peekOfCode": "schema = ProductCatSchema()\nschema_many = ProductCatSchema(many=True)\n# class to list all productcat\nclass ProductCatList(Resource):\n    @classmethod\n    def get(cls):\n        productcats = ProductCatModel.find_all()\n        if productcats:\n            return {\"productcats\": schema_many.dump(productcats)}, 201\n        return {\"message\": gettext(\"product_cat_not_found\")}, 404",
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.productcat",
        "description": "resources.productcat",
        "peekOfCode": "schema_many = ProductCatSchema(many=True)\n# class to list all productcat\nclass ProductCatList(Resource):\n    @classmethod\n    def get(cls):\n        productcats = ProductCatModel.find_all()\n        if productcats:\n            return {\"productcats\": schema_many.dump(productcats)}, 201\n        return {\"message\": gettext(\"product_cat_not_found\")}, 404\n# class to add product productcat",
        "detail": "resources.productcat",
        "documentation": {}
    },
    {
        "label": "ProductColorList",
        "kind": 6,
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "peekOfCode": "class ProductColorList(Resource):\n    @classmethod\n    def get(cls):\n        productcolors = ProductColorModel.find_all()\n        if productcolors:\n            return {\"productcolors\": schema_many.dump(productcolors)}, 201\n        return {\"message\": gettext(\"prduct_color_rel_exist_not_found\")}, 404\n# class to add product colors\nclass ProductColor(Resource):\n    def get(self, productcolor_id):",
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "ProductColor",
        "kind": 6,
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "peekOfCode": "class ProductColor(Resource):\n    def get(self, productcolor_id):\n        productcolor = ProductColorModel.find_by_id(id=productcolor_id)\n        if productcolor:\n            return {\"productcolor\": schema.dump(productcolor)}, 201\n        return {\"message\": gettext(\"prduct_color_rel_exist_not_found\")}, 404\n    @jwt_required\n    def post(self):\n        data = schema.load(ProductColorModel.get_data_())\n        # check if data already exist",
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "peekOfCode": "schema = ProductColorSchema()\nschema_many = ProductColorSchema(many=True)\n# class to list all ProductColors\nclass ProductColorList(Resource):\n    @classmethod\n    def get(cls):\n        productcolors = ProductColorModel.find_all()\n        if productcolors:\n            return {\"productcolors\": schema_many.dump(productcolors)}, 201\n        return {\"message\": gettext(\"prduct_color_rel_exist_not_found\")}, 404",
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.productcol",
        "description": "resources.productcol",
        "peekOfCode": "schema_many = ProductColorSchema(many=True)\n# class to list all ProductColors\nclass ProductColorList(Resource):\n    @classmethod\n    def get(cls):\n        productcolors = ProductColorModel.find_all()\n        if productcolors:\n            return {\"productcolors\": schema_many.dump(productcolors)}, 201\n        return {\"message\": gettext(\"prduct_color_rel_exist_not_found\")}, 404\n# class to add product colors",
        "detail": "resources.productcol",
        "documentation": {}
    },
    {
        "label": "ProductSizeList",
        "kind": 6,
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "peekOfCode": "class ProductSizeList(Resource):\n    @classmethod\n    def get(cls):\n        productsizes = ProductSizeModel.find_all()\n        if productsizes:\n            return {\"productsizes\": schema_many.dump(productsizes)}, 201\n        return {\"message\": gettext(\"product_size_not_found\")}, 404\n# class to add product sizes\nclass ProductSize(Resource):\n    @classmethod",
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSize",
        "kind": 6,
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "peekOfCode": "class ProductSize(Resource):\n    @classmethod\n    def get(cls, size_id):\n        productsize = ProductSizeModel.find_by_id(id=size_id)\n        if productsize:\n            return {\"productsize\": schema.dump(productsize)}, 201\n        return {\"message\": gettext(\"product_size_not_found\")}, 404\n    @jwt_required\n    def post(cls):\n        claim = get_jwt_claims()",
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "peekOfCode": "schema = ProductSizeSchema()\nschema_many = ProductSizeSchema(many=True)\n# class to list all productsize\nclass ProductSizeList(Resource):\n    @classmethod\n    def get(cls):\n        productsizes = ProductSizeModel.find_all()\n        if productsizes:\n            return {\"productsizes\": schema_many.dump(productsizes)}, 201\n        return {\"message\": gettext(\"product_size_not_found\")}, 404",
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.productsize",
        "description": "resources.productsize",
        "peekOfCode": "schema_many = ProductSizeSchema(many=True)\n# class to list all productsize\nclass ProductSizeList(Resource):\n    @classmethod\n    def get(cls):\n        productsizes = ProductSizeModel.find_all()\n        if productsizes:\n            return {\"productsizes\": schema_many.dump(productsizes)}, 201\n        return {\"message\": gettext(\"product_size_not_found\")}, 404\n# class to add product sizes",
        "detail": "resources.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSubCatList",
        "kind": 6,
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "peekOfCode": "class ProductSubCatList(Resource):\n    @classmethod\n    def get(cls):\n        productsubcats = ProductSubCatModel.find_all()\n        if productsubcats:\n            return {\"product_subcategorys\": schema_many.dump(productsubcats)}, 201\n        return {\"message\": gettext(\"product_subcat_not_found\")}, 404\n# class to add product subcategories\nclass ProductSubCat(Resource):\n    def get(self, subcat_id):",
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "ProductSubCat",
        "kind": 6,
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "peekOfCode": "class ProductSubCat(Resource):\n    def get(self, subcat_id):\n        productsubcat = ProductSubCatModel.find_by_id(id=subcat_id)\n        if productsubcat:\n            return {\"product_subcategory\": schema.dump(productsubcat)}, 201\n        return {\"message\": gettext(\"product_subcat_not_found\")}, 404\n    @jwt_required\n    def post(self):\n        data = schema.load(ProductSubCatModel.get_data_())\n        # check if data already exist",
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "peekOfCode": "schema = ProductSubCatSchema()\nschema_many = ProductSubCatSchema(many=True)\n# class to list all productsubcat\nclass ProductSubCatList(Resource):\n    @classmethod\n    def get(cls):\n        productsubcats = ProductSubCatModel.find_all()\n        if productsubcats:\n            return {\"product_subcategorys\": schema_many.dump(productsubcats)}, 201\n        return {\"message\": gettext(\"product_subcat_not_found\")}, 404",
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.productsubcat",
        "description": "resources.productsubcat",
        "peekOfCode": "schema_many = ProductSubCatSchema(many=True)\n# class to list all productsubcat\nclass ProductSubCatList(Resource):\n    @classmethod\n    def get(cls):\n        productsubcats = ProductSubCatModel.find_all()\n        if productsubcats:\n            return {\"product_subcategorys\": schema_many.dump(productsubcats)}, 201\n        return {\"message\": gettext(\"product_subcat_not_found\")}, 404\n# class to add product subcategories",
        "detail": "resources.productsubcat",
        "documentation": {}
    },
    {
        "label": "RatingTypeList",
        "kind": 6,
        "importPath": "resources.ratingtype",
        "description": "resources.ratingtype",
        "peekOfCode": "class RatingTypeList(Resource):\n    def get(self):\n        ratings = RatingTypeModel.find_all()\n        if ratings:\n            return {\"ratings\": [rating.json() for rating in ratings]}, 201\n        return {\"message\": \"Ratings not found\"}, 400",
        "detail": "resources.ratingtype",
        "documentation": {}
    },
    {
        "label": "ReviewList",
        "kind": 6,
        "importPath": "resources.review",
        "description": "resources.review",
        "peekOfCode": "class ReviewList(Resource):\n    def get(self):\n        reviews = ReviewModel.find_all()\n        if reviews:\n            return {\"reviews\": [review.json() for review in reviews]}, 201\n        return {\"message\": \"Reviews not found\"}, 400",
        "detail": "resources.review",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "class Store(Resource):\n    @classmethod\n    # @jwt_required\n    def get(cls, store_id):\n        store = StoreModel.find_by_id(store_id)\n        if store:\n            return schema.dump(store)\n        else:\n            return {\"message\": gettext(\"store_not_found\")}, 404\n    @classmethod",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StoreList",
        "kind": 6,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "class StoreList(Resource):\n    @classmethod\n    def get(cls):\n        stores = StoreModel.find_all()\n        if stores:\n            return {\"stores\": schema_many.dump(stores)}, 201\n        return {\"message\": gettext(\"store_not_found\")}, 404\n# class to get to get stores using pagenate\nclass StorePagenate(Resource):\n    # use for authentication before calling get",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StorePagenate",
        "kind": 6,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "class StorePagenate(Resource):\n    # use for authentication before calling get\n    @classmethod\n    def get(cls, page=1):\n        args_ = StoreModel.get_data_()\n        stores = StoreModel.find_all_pagenate(page=page, **args_)\n        items = stores.pop(\"items\", None)\n        stores[\"stores\"] = schema_many.dump(items)\n        if stores.get(\"stores\", None):\n            return stores, 200",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "schema = StoreSchema()\nschema_many = StoreSchema(many=True)\nclass Store(Resource):\n    @classmethod\n    # @jwt_required\n    def get(cls, store_id):\n        store = StoreModel.find_by_id(store_id)\n        if store:\n            return schema.dump(store)\n        else:",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.store",
        "description": "resources.store",
        "peekOfCode": "schema_many = StoreSchema(many=True)\nclass Store(Resource):\n    @classmethod\n    # @jwt_required\n    def get(cls, store_id):\n        store = StoreModel.find_by_id(store_id)\n        if store:\n            return schema.dump(store)\n        else:\n            return {\"message\": gettext(\"store_not_found\")}, 404",
        "detail": "resources.store",
        "documentation": {}
    },
    {
        "label": "StoreemailList",
        "kind": 6,
        "importPath": "resources.storeemail",
        "description": "resources.storeemail",
        "peekOfCode": "class StoreemailList(Resource):\n    @jwt_required\n    def get(self):\n        storesemails = StoreemailModel.find_all()\n        if storesemails:\n            return {\n                \"storesemails\": [storeemail.json() for storeemail in storesemails]\n            }, 201\n        return {\"message\": \"Item not found\"}, 400",
        "detail": "resources.storeemail",
        "documentation": {}
    },
    {
        "label": "StorelocList",
        "kind": 6,
        "importPath": "resources.storelocation",
        "description": "resources.storelocation",
        "peekOfCode": "class StorelocList(Resource):\n    @jwt_required\n    def get(self):\n        storeslocations = StorelocModel.find_all()\n        if storeslocations:\n            return {\n                \"storeslocations\": [\n                    storelocation.json() for storelocation in storeslocations\n                ]\n            }, 201",
        "detail": "resources.storelocation",
        "documentation": {}
    },
    {
        "label": "StorephoneList",
        "kind": 6,
        "importPath": "resources.storephone",
        "description": "resources.storephone",
        "peekOfCode": "class StorephoneList(Resource):\n    @jwt_required\n    def get(self):\n        storesphones = StorephoneModel.find_all()\n        if storesphones:\n            return {\n                \"storephone\": [storephone.json() for storephone in storesphones]\n            }, 201\n        return {\"message\": \"Item not found\"}, 400",
        "detail": "resources.storephone",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = UserModel.get_data_()\n        if not data:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n        data = login_schema.load(data)\n        try:\n            msg, status = UserModel.login_checker(user_data=data)\n        except Exception as e:",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserRegister",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class UserRegister(Resource):\n    @classmethod\n    @jwt_optional\n    def post(cls):\n        data = usr_reg_schema.load(UserModel.get_data_())\n        # check if data already exist\n        unique_input_error, status = UserModel.post_unique_already_exist(data)\n        if unique_input_error:\n            return unique_input_error, status\n        # create user and send confirmation email",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserList",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class UserList(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls):\n        msg, status_code, _ = UserModel.auth_by_admin_root(\n            get_err=\"user_req_ad_priv_to_get_users\"\n        )\n        if status_code != 200:\n            return msg, status_code\n        users = UserModel.find_all()",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class User(Resource):\n    @classmethod\n    @jwt_required\n    def get(cls, user_id=None):\n        msg, status_code, _ = UserModel.auth_by_admin_root_or_user(\n            user_id=user_id, get_err=\"user_req_ad_priv_to_get_user\"\n        )\n        if status_code != 200:\n            return msg, status_code\n        user = UserModel.find_by_id(id=user_id)",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "TokenRefresh",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class TokenRefresh(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        user_identity = get_jwt_identity()\n        user = UserModel.find_user_by_id(user_identity)\n        if user:\n            if not user.confirmed:\n                jti = get_raw_jwt()[\"jti\"]\n                BLACKLIST_ACCESS.add(jti)",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Email",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class Change_User_Email(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls, user_id):\n        old_email = UserModel.get_data_().get(\"old_email\", None)\n        new_email = UserModel.get_data_().get(\"new_email\", None)\n        password = UserModel.get_data_().get(\"password\", None)\n        msg, status_code = UserModel.change_user_email(\n            user_id=user_id, old_email=old_email, new_email=new_email, password=password\n        )",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Password",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class Change_User_Password(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls, user_id):\n        old_password = UserModel.get_data_().get(\"old_password\", None)\n        new_password = UserModel.get_data_().get(\"new_password\", None)\n        msg, status_code = UserModel.change_user_password(\n            user_id=user_id, old_password=old_password, new_password=new_password\n        )\n        return msg, status_code",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Image",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class Change_User_Image(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls, user_id):\n        user_identity = get_jwt_identity()\n        user = UserModel.find_user_by_id(user_id)\n        print(f\"identity --> {user_identity}, {user.confirmed}\")\n        if not user.confirmed:\n            jti = get_raw_jwt()[\"jti\"]\n            BLACKLIST_ACCESS.add(jti)",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Admin_Status",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class Change_User_Admin_Status(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls, user_id):\n        is_admin = cls.get_data_().get(\"is_admin\", None)\n        msg, status_code = UserModel.change_user_admin_status(\n            user_id=user_id, is_admin=is_admin\n        )\n        return msg, status_code\n# to refresh token when it expires",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "Change_User_Root_Status",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class Change_User_Root_Status(Resource):\n    @classmethod\n    @jwt_required\n    def post(cls, user_id):\n        is_root = cls.get_data_().get(\"is_root\", None)\n        msg, status_code = UserModel.change_user_root_status(\n            user_id=user_id, is_root=is_root\n        )\n        return msg, status_code\n# class to login users",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "UserLogout",
        "kind": 6,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "class UserLogout(Resource):\n    @classmethod\n    @jwt_refresh_token_required\n    def post(cls):\n        # second get  access\n        # second get fresh\n        jti1 = get_raw_jwt()[\"jti\"]\n        jti2 = decode_token(\n            json.loads(request.get_data(as_text=True))[\"access_token\"],\n            allow_expired=True,",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "_5MIN",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "_5MIN = dt.timedelta(minutes=5)\nschema = UserSchema()\nusr_reg_schema = UserSchema(only=(\"email\", \"password\", \"phoneno\"))\nlogin_schema = UserSchema(only=(\"email\", \"password\"))\nuser_put_schema = UserSchema(exclude=(\"email\", \"password\", \"avatar\", \"admin\", \"rootusr\"))\n# email_reset_post_schema = UserSchema(only=(\"email\", \"new_email\", \"confirm_new_email\"), unknown=EXCLUDE)\n# password_reset_post_schema = UserSchema(exclude=(\"password\", \"new_password\", \"confirm_new_phoneno\"))\nschema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "schema = UserSchema()\nusr_reg_schema = UserSchema(only=(\"email\", \"password\", \"phoneno\"))\nlogin_schema = UserSchema(only=(\"email\", \"password\"))\nuser_put_schema = UserSchema(exclude=(\"email\", \"password\", \"avatar\", \"admin\", \"rootusr\"))\n# email_reset_post_schema = UserSchema(only=(\"email\", \"new_email\", \"confirm_new_email\"), unknown=EXCLUDE)\n# password_reset_post_schema = UserSchema(exclude=(\"password\", \"new_password\", \"confirm_new_phoneno\"))\nschema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):\n    @classmethod",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "usr_reg_schema",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "usr_reg_schema = UserSchema(only=(\"email\", \"password\", \"phoneno\"))\nlogin_schema = UserSchema(only=(\"email\", \"password\"))\nuser_put_schema = UserSchema(exclude=(\"email\", \"password\", \"avatar\", \"admin\", \"rootusr\"))\n# email_reset_post_schema = UserSchema(only=(\"email\", \"new_email\", \"confirm_new_email\"), unknown=EXCLUDE)\n# password_reset_post_schema = UserSchema(exclude=(\"password\", \"new_password\", \"confirm_new_phoneno\"))\nschema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):\n    @classmethod\n    def post(cls):",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "login_schema",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "login_schema = UserSchema(only=(\"email\", \"password\"))\nuser_put_schema = UserSchema(exclude=(\"email\", \"password\", \"avatar\", \"admin\", \"rootusr\"))\n# email_reset_post_schema = UserSchema(only=(\"email\", \"new_email\", \"confirm_new_email\"), unknown=EXCLUDE)\n# password_reset_post_schema = UserSchema(exclude=(\"password\", \"new_password\", \"confirm_new_phoneno\"))\nschema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = UserModel.get_data_()",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "user_put_schema",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "user_put_schema = UserSchema(exclude=(\"email\", \"password\", \"avatar\", \"admin\", \"rootusr\"))\n# email_reset_post_schema = UserSchema(only=(\"email\", \"new_email\", \"confirm_new_email\"), unknown=EXCLUDE)\n# password_reset_post_schema = UserSchema(exclude=(\"password\", \"new_password\", \"confirm_new_phoneno\"))\nschema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = UserModel.get_data_()\n        if not data:",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "schema_many",
        "kind": 5,
        "importPath": "resources.users",
        "description": "resources.users",
        "peekOfCode": "schema_many = UserSchema(many=True)\n# class to login usersdt.datetime.now() +\nclass UserLogin(Resource):\n    @classmethod\n    def post(cls):\n        data = UserModel.get_data_()\n        if not data:\n            return {\"message\": gettext(\"user_not_found\")}, 404\n        data = login_schema.load(data)\n        try:",
        "detail": "resources.users",
        "documentation": {}
    },
    {
        "label": "BitcoinPaySchema",
        "kind": 6,
        "importPath": "schemas.bitcoin",
        "description": "schemas.bitcoin",
        "peekOfCode": "class BitcoinPaySchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = BitcoinPayModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.bitcoin",
        "documentation": {}
    },
    {
        "label": "CardpaySchema",
        "kind": 6,
        "importPath": "schemas.cardpay",
        "description": "schemas.cardpay",
        "peekOfCode": "class CardpaySchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = CardpayModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.cardpay",
        "documentation": {}
    },
    {
        "label": "CartProductSchema",
        "kind": 6,
        "importPath": "schemas.cartproduct",
        "description": "schemas.cartproduct",
        "peekOfCode": "class CartProductSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = CardpayModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.cartproduct",
        "documentation": {}
    },
    {
        "label": "CartStatusSchema",
        "kind": 6,
        "importPath": "schemas.cartstatus",
        "description": "schemas.cartstatus",
        "peekOfCode": "class CartStatusSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = CartStatusModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.cartstatus",
        "documentation": {}
    },
    {
        "label": "CartSystemSchema",
        "kind": 6,
        "importPath": "schemas.cartsystem",
        "description": "schemas.cartsystem",
        "peekOfCode": "class CartSystemSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = CartSystemModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.cartsystem",
        "documentation": {}
    },
    {
        "label": "ColorsSchema",
        "kind": 6,
        "importPath": "schemas.colors",
        "description": "schemas.colors",
        "peekOfCode": "class ColorsSchema(ma.SQLAlchemyAutoSchema):\n    # productcol = fields.Nested(\n    #     \"ProductColorSchema\",\n    #     many=True,\n    #     exclude=(\"colors\",),\n    # )\n    class Meta:\n        model = ColorsModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)",
        "detail": "schemas.colors",
        "documentation": {}
    },
    {
        "label": "ConfirmationSchema",
        "kind": 6,
        "importPath": "schemas.confirmation",
        "description": "schemas.confirmation",
        "peekOfCode": "class ConfirmationSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ConfirmationModel\n        # load_only = (\"user_id\",)\n        dump_only = (\n            \"id\",\n            \"expired_at\",\n            \"confirmed\",\n        )\n        include_fk = True",
        "detail": "schemas.confirmation",
        "documentation": {}
    },
    {
        "label": "FavStoreSchema",
        "kind": 6,
        "importPath": "schemas.favoritestore",
        "description": "schemas.favoritestore",
        "peekOfCode": "class FavStoreSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = FavStoreModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.favoritestore",
        "documentation": {}
    },
    {
        "label": "ForgotPasswordSchema",
        "kind": 6,
        "importPath": "schemas.forgot_password",
        "description": "schemas.forgot_password",
        "peekOfCode": "class ForgotPasswordSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ForgotPasswordModel\n        # load_only = (\"user_id\",)\n        dump_only = (\n            \"id\",\n            \"expired_at\",\n            \"used\",\n        )\n        include_fk = True",
        "detail": "schemas.forgot_password",
        "documentation": {}
    },
    {
        "label": "FileStorageField",
        "kind": 6,
        "importPath": "schemas.image",
        "description": "schemas.image",
        "peekOfCode": "class FileStorageField(fields.Field):\n    default_error_messages = {\"invalid\" : \"Not a valid image.\"}\n    def _deserialize(self, value, attr, data, partial=None, **kwargs) -> FileStorage:\n        if value is None:\n            return None\n        if not isinstance(value, FileStorage):\n            self.fail(\"invalid\")\n        return value\nclass ImageSchema(Schema):\n    image = FileStorageField(required=True)",
        "detail": "schemas.image",
        "documentation": {}
    },
    {
        "label": "ImageSchema",
        "kind": 6,
        "importPath": "schemas.image",
        "description": "schemas.image",
        "peekOfCode": "class ImageSchema(Schema):\n    image = FileStorageField(required=True)",
        "detail": "schemas.image",
        "documentation": {}
    },
    {
        "label": "LocationSchema",
        "kind": 6,
        "importPath": "schemas.location",
        "description": "schemas.location",
        "peekOfCode": "class LocationSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = LocationModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.location",
        "documentation": {}
    },
    {
        "label": "PaymentSchema",
        "kind": 6,
        "importPath": "schemas.payment",
        "description": "schemas.payment",
        "peekOfCode": "class PaymentSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = PaymentModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.payment",
        "documentation": {}
    },
    {
        "label": "PaytypeSchema",
        "kind": 6,
        "importPath": "schemas.paymenttype",
        "description": "schemas.paymenttype",
        "peekOfCode": "class PaytypeSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = PaytypeModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.paymenttype",
        "documentation": {}
    },
    {
        "label": "PaystatusSchema",
        "kind": 6,
        "importPath": "schemas.paystatus",
        "description": "schemas.paystatus",
        "peekOfCode": "class PaystatusSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = PaystatusModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.paystatus",
        "documentation": {}
    },
    {
        "label": "ProductSchema",
        "kind": 6,
        "importPath": "schemas.product",
        "description": "schemas.product",
        "peekOfCode": "class ProductSchema(ma.SQLAlchemyAutoSchema):\n    # to create fields to dump\n    # Note: variable name must the the same as name\n    # in backref\n    # store = fields.Nested(\n    #     lambda: StoreSchema(\n    #         only=(\n    #             \"storename\",\n    #             \"user\",\n    #             \"id\",",
        "detail": "schemas.product",
        "documentation": {}
    },
    {
        "label": "ProductCatSchema",
        "kind": 6,
        "importPath": "schemas.productcat",
        "description": "schemas.productcat",
        "peekOfCode": "class ProductCatSchema(ma.SQLAlchemyAutoSchema):\n    # productsubcat = fields.Nested(\n    #     \"ProductSubCatSchema\",\n    #     many=True,\n    #     exclude=(\n    #         \"ProductCat\",\n    #         \"products\",\n    #         \"productsize\",\n    #     ),\n    # )",
        "detail": "schemas.productcat",
        "documentation": {}
    },
    {
        "label": "ProductColorSchema",
        "kind": 6,
        "importPath": "schemas.productcol",
        "description": "schemas.productcol",
        "peekOfCode": "class ProductColorSchema(ma.SQLAlchemyAutoSchema):\n    # product = fields.Nested(lambda: ProductSchema(only=(\"id\", \"productname\", \"store\")))\n    # colors = fields.Nested(lambda: ColorsSchema(only=(\"desc\", \"id\")))\n    class Meta:\n        model = ProductColorModel\n        # load_only = (\"color_id\", \"product_id\")\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.productcol",
        "documentation": {}
    },
    {
        "label": "ProductSizeSchema",
        "kind": 6,
        "importPath": "schemas.productsize",
        "description": "schemas.productsize",
        "peekOfCode": "class ProductSizeSchema(ma.SQLAlchemyAutoSchema):\n    productcat = fields.Nested(lambda: ProductCatSchema(only=(\"desc\", \"id\")))\n    productsubcat = fields.Nested(lambda: ProductSubCatSchema(only=(\"desc\", \"id\")))\n    class Meta:\n        model = ProductSizeModel\n        # load_only = (\"productsubcat_id\", \"productcat_id\")\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.productsize",
        "documentation": {}
    },
    {
        "label": "ProductSubCatSchema",
        "kind": 6,
        "importPath": "schemas.productsubcat",
        "description": "schemas.productsubcat",
        "peekOfCode": "class ProductSubCatSchema(ma.SQLAlchemyAutoSchema):\n    # productcat = fields.Nested(lambda: ProductCatSchema(only=(\"desc\", \"id\")))\n    # productsize = fields.Nested(\n    #     \"ProductSizeSchema\",\n    #     many=True,\n    #     exclude=(\n    #         \"productcat\",\n    #         \"products\",\n    #         \"productcat_id\",\n    #         \"productsubcat\",",
        "detail": "schemas.productsubcat",
        "documentation": {}
    },
    {
        "label": "RatingTypeSchema",
        "kind": 6,
        "importPath": "schemas.ratingtype",
        "description": "schemas.ratingtype",
        "peekOfCode": "class RatingTypeSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = RatingTypeModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.ratingtype",
        "documentation": {}
    },
    {
        "label": "ReviewSchema",
        "kind": 6,
        "importPath": "schemas.review",
        "description": "schemas.review",
        "peekOfCode": "class ReviewSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = ReviewModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.review",
        "documentation": {}
    },
    {
        "label": "StoreSchema",
        "kind": 6,
        "importPath": "schemas.store",
        "description": "schemas.store",
        "peekOfCode": "class StoreSchema(ma.SQLAlchemyAutoSchema):\n    users = fields.Nested(\n        lambda: UserSchema(only=(\"id\", \"firstname\", \"middlename\", \"lastname\"))\n    )\n    products = fields.Nested(\"ProductSchema\", many=True, exclude=(\"store\",))\n    class Meta:\n        model = StoreModel\n        # load_only = (\"user_id\",)\n        dump_only = (\"id\",)\n        exclude = (\"avatar\",)",
        "detail": "schemas.store",
        "documentation": {}
    },
    {
        "label": "StoreemailSchema",
        "kind": 6,
        "importPath": "schemas.storeemail",
        "description": "schemas.storeemail",
        "peekOfCode": "class StoreemailSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = StoreemailModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.storeemail",
        "documentation": {}
    },
    {
        "label": "StorelocSchema",
        "kind": 6,
        "importPath": "schemas.storelocation",
        "description": "schemas.storelocation",
        "peekOfCode": "class StorelocSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = StorelocModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.storelocation",
        "documentation": {}
    },
    {
        "label": "StorephoneSchema",
        "kind": 6,
        "importPath": "schemas.storephone",
        "description": "schemas.storephone",
        "peekOfCode": "class StorephoneSchema(ma.SQLAlchemyAutoSchema):\n    class Meta:\n        model = StorephoneModel\n        # load_only = (\"password\",)\n        dump_only = (\"id\",)\n        include_fk = True\n        include_relationships = True",
        "detail": "schemas.storephone",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "schemas.users",
        "description": "schemas.users",
        "peekOfCode": "class UserSchema(ma.SQLAlchemyAutoSchema):\n    stores = fields.Nested(\"StoreSchema\", many=True, exclude=(\"users\",))\n    class Meta:\n        model = UserModel\n        load_only = (\"password\",)\n        dump_only = (\n            \"id\",\n            \"confirmation\",\n        )\n        exclude = (\"avatar\",)",
        "detail": "schemas.users",
        "documentation": {}
    },
    {
        "label": "SignupTest",
        "kind": 6,
        "importPath": "tests.test_user",
        "description": "tests.test_user",
        "peekOfCode": "class SignupTest(unittest.TestCase):\n    def test_successful_signup(self):\n        # Given\n        data = {\n            \"firstname\": \"Gbenga\",\n            \"middlename\": \"vincent\",\n            \"lastname\": \"akinwande\",\n            \"image\": \"path/to/images\",\n            \"password\": \"1234\",\n            \"phoneno\": \"09025171175\",",
        "detail": "tests.test_user",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "tests.test_user",
        "description": "tests.test_user",
        "peekOfCode": "URL = \"https://maistore.herokuapp.com/api/v1/register\"\nclass SignupTest(unittest.TestCase):\n    def test_successful_signup(self):\n        # Given\n        data = {\n            \"firstname\": \"Gbenga\",\n            \"middlename\": \"vincent\",\n            \"lastname\": \"akinwande\",\n            \"image\": \"path/to/images\",\n            \"password\": \"1234\",",
        "detail": "tests.test_user",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp, cors, jwt, api, db, ma, migrate = create_and_config_app(app=app, route_path=route_path)\nif __name__ == \"__main__\":\n    @app.before_first_request\n    def create_tables():\n        db.create_all()\n        create_usr_from_root(app=app)\n    app.run(port=7001, debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "config_app",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def config_app(app):\n    app.config.from_object(\"config\")\n    app.config.from_envvar(\"APPLICATION_SETTINGS\")\n    return app\ndef create_usr_from_root(app):\n    from models.users import UserModel, gettext\n    data_usr = {\n        \"admin\": True,\n        \"rootusr\": True,\n        \"password\": os.environ.get(\"ROOT_USR_PWD\"),",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "create_usr_from_root",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def create_usr_from_root(app):\n    from models.users import UserModel, gettext\n    data_usr = {\n        \"admin\": True,\n        \"rootusr\": True,\n        \"password\": os.environ.get(\"ROOT_USR_PWD\"),\n        \"email\": os.environ.get(\"ROOT_USR_EMAIL\"),\n        \"phoneno\": os.environ.get(\"ROOT_USR_PHONE\"),\n    }\n    # creat root user",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "create_api",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def create_api(app):\n    return Api(app=app)\ndef link_jwt(app):\n    return JWTManager(app)  # creates a new end point called */auth*\ndef link_route_path(api, route_path):\n    for route, path in route_path:\n        api.add_resource(route, *path)\n    return api\n# def app_err_handler(app):\n#     @app.errorhandler(exc.SQLAlchemyError)",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "link_jwt",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def link_jwt(app):\n    return JWTManager(app)  # creates a new end point called */auth*\ndef link_route_path(api, route_path):\n    for route, path in route_path:\n        api.add_resource(route, *path)\n    return api\n# def app_err_handler(app):\n#     @app.errorhandler(exc.SQLAlchemyError)\n#     def sqlalchemy_err(e):\n#         return e",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "link_route_path",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def link_route_path(api, route_path):\n    for route, path in route_path:\n        api.add_resource(route, *path)\n    return api\n# def app_err_handler(app):\n#     @app.errorhandler(exc.SQLAlchemyError)\n#     def sqlalchemy_err(e):\n#         return e\ndef jwt_error_handler(jwt):\n    \"\"\"",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "jwt_error_handler",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def jwt_error_handler(jwt):\n    \"\"\"\n    Note here is more secure claim must be added here,\n    where only one user can be the super user.\n    And Only that user can create the first admin.\n    \"\"\"\n    @jwt.user_claims_loader\n    def add_claims_to_jwt(identity=None):\n        from models.users import UserModel\n        usr = UserModel.find_by_id(id=identity)",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "mash_err_handler",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def mash_err_handler(app):\n    @app.errorhandler(ValidationError)\n    def handle_marshmallow_validation(err):\n        return {\"message\": str(err)}, 400\ndef create_and_config_app(app, route_path):\n    load_dotenv(\".env\", verbose=True)\n    cors = CORS(app)\n    app = config_app(app)\n    api = create_api(app)\n    patch_request_class(app, size=10 * 1024 * 1024)  # 10MB max size upload",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "create_and_config_app",
        "kind": 2,
        "importPath": "app_setup",
        "description": "app_setup",
        "peekOfCode": "def create_and_config_app(app, route_path):\n    load_dotenv(\".env\", verbose=True)\n    cors = CORS(app)\n    app = config_app(app)\n    api = create_api(app)\n    patch_request_class(app, size=10 * 1024 * 1024)  # 10MB max size upload\n    configure_uploads(app, IMAGE_SET)\n    jwt = link_jwt(app)\n    mash_err_handler(app=app)\n    jwt_error_handler(jwt)",
        "detail": "app_setup",
        "documentation": {}
    },
    {
        "label": "BLACKLIST_ACCESS",
        "kind": 5,
        "importPath": "blacklist",
        "description": "blacklist",
        "peekOfCode": "BLACKLIST_ACCESS = set()",
        "detail": "blacklist",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URI",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SQLALCHEMY_DATABASE_URI = os.environ['DATABASE_URL']\nDEBUG = os.environ[\"DEBUG\"]\nPORT = os.environ[\"PORT\"]\nCLOUDINARY_URL = os.environ[\"CLOUDINARY_URL\"]\nUPLOADED_IMAGE_DEST = os.path.join(os.environ[\"UPLOADED_IMAGES_DEST\"], \"static\")\nSQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DEBUG = os.environ[\"DEBUG\"]\nPORT = os.environ[\"PORT\"]\nCLOUDINARY_URL = os.environ[\"CLOUDINARY_URL\"]\nUPLOADED_IMAGE_DEST = os.path.join(os.environ[\"UPLOADED_IMAGES_DEST\"], \"static\")\nSQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "PORT = os.environ[\"PORT\"]\nCLOUDINARY_URL = os.environ[\"CLOUDINARY_URL\"]\nUPLOADED_IMAGE_DEST = os.path.join(os.environ[\"UPLOADED_IMAGES_DEST\"], \"static\")\nSQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CLOUDINARY_URL",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CLOUDINARY_URL = os.environ[\"CLOUDINARY_URL\"]\nUPLOADED_IMAGE_DEST = os.path.join(os.environ[\"UPLOADED_IMAGES_DEST\"], \"static\")\nSQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "UPLOADED_IMAGE_DEST",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "UPLOADED_IMAGE_DEST = os.path.join(os.environ[\"UPLOADED_IMAGES_DEST\"], \"static\")\nSQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_TRACK_MODIFICATIONS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SQLALCHEMY_TRACK_MODIFICATIONS = os.environ[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]\nPROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "PROPAGATE_EXCEPTIONS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "PROPAGATE_EXCEPTIONS = os.environ[\"PROPAGATE_EXCEPTIONS\"]\nJWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "JWT_SECRET_KEY = os.environ[\"JWT_SECRET_KEY\"]\nSECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]\nCORS_HEADERS = \"Content-Type\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SECRET_KEY = os.environ[\"APP_SECRET_KEY\"]\nJWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]\nCORS_HEADERS = \"Content-Type\"\n# class Config(object):",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "JWT_BLACKLIST_ENABLED",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "JWT_BLACKLIST_ENABLED = os.environ[\"JWT_BLACKLIST_ENABLED\"]\nJWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]\nCORS_HEADERS = \"Content-Type\"\n# class Config(object):\n#     DEBUG = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "JWT_BLACKLIST_TOKEN_CHECKS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "JWT_BLACKLIST_TOKEN_CHECKS = [\"access\", \"refresh\"]\nDEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]\nCORS_HEADERS = \"Content-Type\"\n# class Config(object):\n#     DEBUG = False\n#     TESTING = False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PARSERS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "DEFAULT_PARSERS = [\n    \"flask.ext.api.parsers.JSONParser\",\n    \"flask.ext.api.parsers.URLEncodedParser\",\n    \"flask.ext.api.parsers.MultiPartParser\",\n]\nCORS_HEADERS = \"Content-Type\"\n# class Config(object):\n#     DEBUG = False\n#     TESTING = False\n#     CSRF_ENABLED = True",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORS_HEADERS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CORS_HEADERS = \"Content-Type\"\n# class Config(object):\n#     DEBUG = False\n#     TESTING = False\n#     CSRF_ENABLED = True\n#     SECRET_KEY = 'this-really-needs-to-be-changed'\n#     SQLALCHEMY_DATABASE_URI = os.environ['DATABASE_URL']\n#     DEBUG = os.environ[\"DEBUG\"]\n#     PORT = os.environ[\"PORT\"]\n#     SQLALCHEMY_DATABASE_URI = os.environ[\"DATABASE_URL\"]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "convention",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "convention = {\n            \"ix\" : \"ix_%(column_0_label)s\",\n            \"uq\" : \"uq_%(table_name)s_%(column_0_name)s\",\n            \"ck\" : \"ck_%(table_name)s_%(constraint_name)s\",\n            \"fk\" : \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n            \"pk\" : \"pk_%(table_name)s\"\n}\nmetadata = MetaData(naming_convention=convention)\ndb = SQLAlchemy(metadata=metadata)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "metadata = MetaData(naming_convention=convention)\ndb = SQLAlchemy(metadata=metadata)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "db",
        "description": "db",
        "peekOfCode": "db = SQLAlchemy(metadata=metadata)",
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "BLANK_ERROR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "BLANK_ERROR = \"{} can not be left blank\"\nTO_INPUT = \"input {}\"\nNOT_FOUND = \"{} not found\"\nNOT_FOUND_IN = \"{} not found {}\"\nEXPIRED = \"{} has expired\"\nAUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "TO_INPUT",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "TO_INPUT = \"input {}\"\nNOT_FOUND = \"{} not found\"\nNOT_FOUND_IN = \"{} not found {}\"\nEXPIRED = \"{} has expired\"\nAUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "NOT_FOUND",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "NOT_FOUND = \"{} not found\"\nNOT_FOUND_IN = \"{} not found {}\"\nEXPIRED = \"{} has expired\"\nAUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "NOT_FOUND_IN",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "NOT_FOUND_IN = \"{} not found {}\"\nEXPIRED = \"{} has expired\"\nAUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "EXPIRED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "EXPIRED = \"{} has expired\"\nAUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "AUTH_REQUIRED_TO_DELETE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "AUTH_REQUIRED_TO_DELETE = \"authentication required to delete {}\"\nROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ROOT_PRIVILEDGE_REQUIRED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ROOT_PRIVILEDGE_REQUIRED = \"Root priviledge required to {}.\"\nADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ADMIN_PRIVILEDGE_REQUIRED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ADMIN_PRIVILEDGE_REQUIRED = \"Admin priviledge required to {}.\"\nDOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "DOES_NOT_EXIST",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "DOES_NOT_EXIST = \"{} does not exist\"\nERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_WHILE_INSERTING",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_WHILE_INSERTING = \"An error occured while inserting {}\"\nERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_WHILE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_WHILE = \"An error occured while {}\"\nERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_N_WHILE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_N_WHILE = \"An error {} occured while {}\"\nDELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "DELETED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "DELETED = \"{} deleted\"\nINVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "INVALID",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "INVALID = \"Invalid {}\"\nINVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "INVALID_CREDENTIALS",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "INVALID_CREDENTIALS = \"Invalid Credentials\"\nINVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "INVALID_CREDENTIALS_FOR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "INVALID_CREDENTIALS_FOR = \"Invalid Credential for {}\"\nALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ALREADY_EXISTS",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ALREADY_EXISTS = \"{} {} already exists.\"\nNOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "NOTHING_TO_UPDATE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "NOTHING_TO_UPDATE = \"Nothing to update.\"\nALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ALREADY_CONFIRMED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ALREADY_CONFIRMED = \"{} {} already confirmed.\"\nALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ALREADY_USED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ALREADY_USED = \"{} {} already used.\"\nLODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "LODDED_OUT",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "LODDED_OUT = \"Successfully logged out.\"\nINTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "INTERNAL_ERROR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "INTERNAL_ERROR = \"Internal Error\"\nNOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "NOT_CONFIRMED_ERROR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "NOT_CONFIRMED_ERROR = \"You have not confirm registration please check you {} <{}>\"\nUSER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "USER_CONFIRMED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "USER_CONFIRMED = \"User {} <{}> confirmed\"\nEMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "EMAIL_CHANGE_SUCCESSFULLY",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "EMAIL_CHANGE_SUCCESSFULLY = \"Email changed successfully, an email with an \\\nactivation link has been sent to this <{}> email address, please check.\"\nSUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "SUCCESS_UPDATE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "SUCCESS_UPDATE = \"{} successfully updated\"\nSENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "SENT",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "SENT = \"{} was sent\"\nSENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "SENT_TO",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "SENT_TO = \"{} was sent to {}\"\nRESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "RESET_SUCCESSFUL",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "RESET_SUCCESSFUL = \"{} reset successful\"\nSUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "SUCCESS_REGISTER_MESSAGE",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "SUCCESS_REGISTER_MESSAGE = \"Account created successfuly, an email with an \\\nyour 8-digit confirmation code has been sent to this <{}> email address, please check.\"\nCONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "CONFIRMATION_SUCCESSFUL",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "CONFIRMATION_SUCCESSFUL = \"{} confirmation successful.\"\nCONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "CONFIRMATION_RESEND_SUCCESSFUL",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "CONFIRMATION_RESEND_SUCCESSFUL = \"E-mail confirmation successfully resent.\"\nCONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "CONFIRMATION_RESEND_FAILED",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "CONFIRMATION_RESEND_FAILED = \"Failed to resend e-mail confirmation.\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_OCCURED_CREATING_ROOT_USR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_OCCURED_CONFIRMING_ROOT_USR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_OCCURED_CONFIRMING_ROOT_USR = \"error {} occured while confirming root user\"\nERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ERROR_OCCURED_CREATING_ROOT_USR",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "ERROR_OCCURED_CREATING_ROOT_USR = \"error {} occured while creating root user\"\nCANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "CANNOT_DELETE_ROOT",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "CANNOT_DELETE_ROOT = \"User can not delete a root user\"\nCANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "CANNOT_INSERT",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "CANNOT_INSERT = \"Can not insert {} because {}\"\nNOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "NOT_EQUAL",
        "kind": 5,
        "importPath": "error_messages",
        "description": "error_messages",
        "peekOfCode": "NOT_EQUAL = \"{} not equal to {}\"",
        "detail": "error_messages",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "ma",
        "description": "ma",
        "peekOfCode": "ma = Marshmallow()",
        "detail": "ma",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "migrate = Migrate(app, db)\nmanager = Manager(app)\nmanager.add_command('db', MigrateCommand)\nif __name__ == '__main__':\n    manager.run()",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "manager",
        "kind": 5,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "manager = Manager(app)\nmanager.add_command('db', MigrateCommand)\nif __name__ == '__main__':\n    manager.run()",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "api_version",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "api_version = \"/api/v1\"\nroute_path = [\n    [TokenRefresh, [api_version + \"/refresh\"]],  # https://mistore.com/refresh\n    [UserRegister, [api_version + \"/register\"]],  # https://mistore.com/register\n    [\n        ConfirmUser,\n        [api_version + \"/confirm_user/user/<string:email>\"],\n    ],  # https://mistore.com/confirm_user/v@gm.com\n    [\n        ViewConfirmation,",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "route_path",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "route_path = [\n    [TokenRefresh, [api_version + \"/refresh\"]],  # https://mistore.com/refresh\n    [UserRegister, [api_version + \"/register\"]],  # https://mistore.com/register\n    [\n        ConfirmUser,\n        [api_version + \"/confirm_user/user/<string:email>\"],\n    ],  # https://mistore.com/confirm_user/v@gm.com\n    [\n        ViewConfirmation,\n        [api_version + \"/view_user_confirmations/user/<string:email>\"],",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def create_tables():\n    db.create_all()\n    create_usr_from_root(app=app)\ndb.init_app(app)\nma.init_app(app)",
        "detail": "run",
        "documentation": {}
    }
]